{
  "paragraphs": [
    {
      "text": "%pyspark\nfrom pyspark.sql.functions import *\nfrom pyspark.sql.types import *",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:18:01-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067795_975836726",
      "id": "paragraph_1639157005760_97226412",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:520",
      "dateFinished": "2021-12-12T23:18:19-0500",
      "dateStarted": "2021-12-12T23:18:01-0500"
    },
    {
      "title": "Reading the 311 data in the form of a DataFrame",
      "text": "%pyspark\nfile_name_311 = '/user/CS-GY-6513/project_data/data-cityofnewyork-us.erm2-nwe9.csv'\nNYPD_complaint_dataset = '/user/CS-GY-6513/project_data/data-cityofnewyork-us.qgea-i56i.csv'\nNYPD_arrest_dataset_name = '/user/CS-GY-6513/project_data/data-cityofnewyork-us.uip8-fykc.csv'\nshooting_dataset_name = '/user/CS-GY-6513/project_data/data-cityofnewyork-us.833y-fsy8.csv'\nbikes_building_dataset_name = '/user/CS-GY-6513/project_data/data-cityofnewyork-us.scjj-6yaf.csv'\nNYPD_B_summons = '/user/CS-GY-6513/project_data/data-cityofnewyork-us.57p3-pdcj.csv'\nparking_dataset_name = '/user/CS-GY-6513/project_data/data-cityofnewyork-us.nc67-uf89.csv'\ncollisions_dataset_name = '/user/CS-GY-6513/project_data/data-cityofnewyork-us.h9gi-nx95.csv'\nflu_vac_dataset_name = '/user/CS-GY-6513/project_data/data-cityofnewyork-us.w9ei-idxz.csv'\nwifi_dataset_name = '/user/CS-GY-6513/project_data/data-cityofnewyork-us.yjub-udmw.csv'\nhousing_buildings_dataset_name = '/user/CS-GY-6513/project_data/data-cityofnewyork-us.hg8x-zxpr.csv'\n\ndata = spark.read.option(\"header\",True) \\\n     .csv(file_name_311)\n     \nNYPD_complaint_df = spark.read.option(\"header\",True) \\\n     .csv(NYPD_complaint_dataset)\n     \nNYPD_arrests_df = spark.read.option(\"header\",True) \\\n     .csv(NYPD_arrest_dataset_name)\n     \nshooting_dataset_df =  spark.read.option(\"header\",True) \\\n     .csv(shooting_dataset_name)\n     \nbikes_building_df =  spark.read.option(\"header\",True) \\\n     .csv(bikes_building_dataset_name)\n     \nNYPD_B_summons_df = spark.read.option(\"header\",True) \\\n     .csv(NYPD_B_summons)\n     \nparking_df = spark.read.option(\"header\",True) \\\n     .csv(parking_dataset_name)\n     \ncollisions_df = spark.read.option(\"header\",True) \\\n     .csv(collisions_dataset_name)\n     \nflu_vac_df =  spark.read.option(\"header\",True) \\\n     .csv(flu_vac_dataset_name)\n     \nwifi_df = spark.read.option(\"header\",True) \\\n     .csv(wifi_dataset_name)\n     \nhousing_buildings_df = spark.read.option(\"header\",True) \\\n     .csv(housing_buildings_dataset_name)\n     \n",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:18:21-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=0",
              "$$hashKey": "object:8430"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=1",
              "$$hashKey": "object:8431"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=2",
              "$$hashKey": "object:8432"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=3",
              "$$hashKey": "object:8433"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=4",
              "$$hashKey": "object:8434"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=5",
              "$$hashKey": "object:8435"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=6",
              "$$hashKey": "object:8436"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=7",
              "$$hashKey": "object:8437"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=8",
              "$$hashKey": "object:8438"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=9",
              "$$hashKey": "object:8439"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=10",
              "$$hashKey": "object:8440"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067795_589790957",
      "id": "paragraph_1639016192502_1013448605",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "$$hashKey": "object:521",
      "dateFinished": "2021-12-12T23:18:35-0500",
      "dateStarted": "2021-12-12T23:18:21-0500"
    },
    {
      "title": "Understanding the Schema",
      "text": "%pyspark\ndata.printSchema()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:18:26-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- Unique Key: string (nullable = true)\n |-- Created Date: string (nullable = true)\n |-- Closed Date: string (nullable = true)\n |-- Agency: string (nullable = true)\n |-- Agency Name: string (nullable = true)\n |-- Complaint Type: string (nullable = true)\n |-- Descriptor: string (nullable = true)\n |-- Location Type: string (nullable = true)\n |-- Incident Zip: string (nullable = true)\n |-- Incident Address: string (nullable = true)\n |-- Street Name: string (nullable = true)\n |-- Cross Street 1: string (nullable = true)\n |-- Cross Street 2: string (nullable = true)\n |-- Intersection Street 1: string (nullable = true)\n |-- Intersection Street 2: string (nullable = true)\n |-- Address Type: string (nullable = true)\n |-- City: string (nullable = true)\n |-- Landmark: string (nullable = true)\n |-- Facility Type: string (nullable = true)\n |-- Status: string (nullable = true)\n |-- Due Date: string (nullable = true)\n |-- Resolution Description: string (nullable = true)\n |-- Resolution Action Updated Date: string (nullable = true)\n |-- Community Board: string (nullable = true)\n |-- BBL: string (nullable = true)\n |-- Borough: string (nullable = true)\n |-- X Coordinate (State Plane): string (nullable = true)\n |-- Y Coordinate (State Plane): string (nullable = true)\n |-- Open Data Channel Type: string (nullable = true)\n |-- Park Facility Name: string (nullable = true)\n |-- Park Borough: string (nullable = true)\n |-- Vehicle Type: string (nullable = true)\n |-- Taxi Company Borough: string (nullable = true)\n |-- Taxi Pick Up Location: string (nullable = true)\n |-- Bridge Highway Name: string (nullable = true)\n |-- Bridge Highway Direction: string (nullable = true)\n |-- Road Ramp: string (nullable = true)\n |-- Bridge Highway Segment: string (nullable = true)\n |-- Latitude: string (nullable = true)\n |-- Longitude: string (nullable = true)\n |-- Location: string (nullable = true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067795_374459413",
      "id": "paragraph_1639155352983_1774824997",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "$$hashKey": "object:522",
      "dateFinished": "2021-12-12T23:18:35-0500",
      "dateStarted": "2021-12-12T23:18:26-0500"
    },
    {
      "title": "Casting the datatype of ZipCode from String to Integer",
      "text": "%pyspark\ndef stringtoI(data_new,zip_code):\n    \n    data_new = data_new.withColumn(zip_code, data_new[zip_code].cast(IntegerType()))\n    return data_new",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:18:29-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067795_1753595873",
      "id": "paragraph_1639155527311_128264608",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "$$hashKey": "object:523",
      "dateFinished": "2021-12-12T23:18:35-0500",
      "dateStarted": "2021-12-12T23:18:35-0500"
    },
    {
      "title": "Declaring 311 variables for reusability purposes",
      "text": "%pyspark\n\nzip_code = \"Incident zip\"\nborough = \"Borough\"\ncity = \"City\"\nkey = \"Unique Key\"",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:18:32-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067795_2089596030",
      "id": "paragraph_1639314278090_1605672655",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "$$hashKey": "object:524",
      "dateFinished": "2021-12-12T23:18:35-0500",
      "dateStarted": "2021-12-12T23:18:35-0500"
    },
    {
      "text": "%pyspark\ndata = stringtoI(data,zip_code)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:18:39-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067795_1955576421",
      "id": "paragraph_1639313959599_1013889284",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "$$hashKey": "object:525",
      "dateFinished": "2021-12-12T23:18:39-0500",
      "dateStarted": "2021-12-12T23:18:39-0500"
    },
    {
      "text": "%pyspark\ndata.printSchema()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- Unique Key: string (nullable = true)\n |-- Created Date: string (nullable = true)\n |-- Closed Date: string (nullable = true)\n |-- Agency: string (nullable = true)\n |-- Agency Name: string (nullable = true)\n |-- Complaint Type: string (nullable = true)\n |-- Descriptor: string (nullable = true)\n |-- Location Type: string (nullable = true)\n |-- Incident zip: integer (nullable = true)\n |-- Incident Address: string (nullable = true)\n |-- Street Name: string (nullable = true)\n |-- Cross Street 1: string (nullable = true)\n |-- Cross Street 2: string (nullable = true)\n |-- Intersection Street 1: string (nullable = true)\n |-- Intersection Street 2: string (nullable = true)\n |-- Address Type: string (nullable = true)\n |-- City: string (nullable = true)\n |-- Landmark: string (nullable = true)\n |-- Facility Type: string (nullable = true)\n |-- Status: string (nullable = true)\n |-- Due Date: string (nullable = true)\n |-- Resolution Description: string (nullable = true)\n |-- Resolution Action Updated Date: string (nullable = true)\n |-- Community Board: string (nullable = true)\n |-- BBL: string (nullable = true)\n |-- Borough: string (nullable = true)\n |-- X Coordinate (State Plane): string (nullable = true)\n |-- Y Coordinate (State Plane): string (nullable = true)\n |-- Open Data Channel Type: string (nullable = true)\n |-- Park Facility Name: string (nullable = true)\n |-- Park Borough: string (nullable = true)\n |-- Vehicle Type: string (nullable = true)\n |-- Taxi Company Borough: string (nullable = true)\n |-- Taxi Pick Up Location: string (nullable = true)\n |-- Bridge Highway Name: string (nullable = true)\n |-- Bridge Highway Direction: string (nullable = true)\n |-- Road Ramp: string (nullable = true)\n |-- Bridge Highway Segment: string (nullable = true)\n |-- Latitude: string (nullable = true)\n |-- Longitude: string (nullable = true)\n |-- Location: string (nullable = true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067795_935309126",
      "id": "paragraph_1639336415976_1670587828",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:526"
    },
    {
      "title": "Creating RDD Dataframe for complete dataset",
      "text": "%pyspark\ndef dfCreation(data_new):\n    #This method is called for every other dataset other than 311 that is being checked using the same techniques of 311\n    rdd = data_new.rdd\n    #This is our 311 df that will be used throughout the cleaning of 311 dataset\n    df = spark.createDataFrame(rdd, data_new.schema)\n    return df\n",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:18:52-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067796_1691077380",
      "id": "paragraph_1639149780145_2115000533",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "$$hashKey": "object:527",
      "dateFinished": "2021-12-12T23:18:52-0500",
      "dateStarted": "2021-12-12T23:18:52-0500"
    },
    {
      "text": "%pyspark\ndf = dfCreation(data)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:18:56-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067796_80128235",
      "id": "paragraph_1639326401379_986339379",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "$$hashKey": "object:528",
      "dateFinished": "2021-12-12T23:18:56-0500",
      "dateStarted": "2021-12-12T23:18:56-0500"
    },
    {
      "title": "Finding incorrect mappings of ZipCode to Boroughs",
      "text": "%pyspark\n\ndef inc_zipToB_map(df,zip_code,key,borough):\n    print(\"Incorrect Data for BRONX:\\n\")\n    df.where((col(zip_code) > 10450) & (col(zip_code) < 10475) & (upper(col(borough)) != \"BRONX\")).select(key,zip_code,borough).show()\n    print(\"Incorrect Data for BROOKLYN:\\n\")\n    df.where((col(zip_code) > 11200) & (col(zip_code) < 11240) & (upper(col(borough)) != \"BROOKLYN\")).select(key,borough).show()\n    print(\"Incorrect Data for MANHATTAN:\\n\")\n    df.where((col(zip_code) > 10000) & (col(zip_code) < 10280) & (upper(col(borough)) != \"MANHATTAN\")).select(key,borough).show()\n    print(\"Incorrect Data for STATEN ISLAND:\\n\")\n    df.where((col(zip_code) > 10300) & (col(zip_code) < 10315) & (upper(col(borough)) != \"STATEN ISLAND\")).select(key,borough).show()\n    print(\"Incorrect Data for QUEENS:\\n\")\n    df.where((col(zip_code) > 11350) & (col(zip_code) < 11700) & (upper(col(borough)) != \"QUEENS\")).select(key,borough).show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:18:58-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067796_1404059847",
      "id": "paragraph_1639153326272_1713056441",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "$$hashKey": "object:529",
      "dateFinished": "2021-12-12T23:18:58-0500",
      "dateStarted": "2021-12-12T23:18:58-0500"
    },
    {
      "text": "%pyspark\ninc_zipToB_map(df,zip_code,key,borough)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:19:01-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 464,
              "optionOpen": false
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Incorrect Data for BRONX:\n\n+----------+------------+---------+\n|Unique Key|Incident zip|  Borough|\n+----------+------------+---------+\n|  25704946|       10463|MANHATTAN|\n|  25714131|       10463|MANHATTAN|\n|  25724869|       10463|MANHATTAN|\n|  25724870|       10463|MANHATTAN|\n|  25749323|       10463|MANHATTAN|\n|  25758319|       10463|MANHATTAN|\n|  25787631|       10463|MANHATTAN|\n|  25788523|       10463|MANHATTAN|\n|  25792637|       10463|MANHATTAN|\n|  25795607|       10463|MANHATTAN|\n|  25797428|       10463|MANHATTAN|\n|  25800989|       10463|MANHATTAN|\n|  25801432|       10463|MANHATTAN|\n|  25808666|       10463|MANHATTAN|\n|  25828882|       10463|MANHATTAN|\n|  25830754|       10463|MANHATTAN|\n|  25842085|       10463|MANHATTAN|\n|  25842809|       10463|MANHATTAN|\n|  25859866|       10463|MANHATTAN|\n|  25867274|       10463|MANHATTAN|\n+----------+------------+---------+\nonly showing top 20 rows\n\nIncorrect Data for BROOKLYN:\n\n+----------+-----------+\n|Unique Key|    Borough|\n+----------+-----------+\n|  25700412|06 BROOKLYN|\n|  25702949|     QUEENS|\n|  25703417|     QUEENS|\n|  25704588|     QUEENS|\n|  25705108|     QUEENS|\n|  25720262|     QUEENS|\n|  25739961|     QUEENS|\n|  25744764|01 BROOKLYN|\n|  25753111|     QUEENS|\n|  25788225|     QUEENS|\n|  25788537|     QUEENS|\n|  25793079|     QUEENS|\n|  25799428|     QUEENS|\n|  25812752|     QUEENS|\n|  25842097|06 BROOKLYN|\n|  25843796|     QUEENS|\n|  25848852|14 BROOKLYN|\n|  25850834|     QUEENS|\n|  25868652|     QUEENS|\n|  25875575|     QUEENS|\n+----------+-----------+\nonly showing top 20 rows\n\nIncorrect Data for MANHATTAN:\n\n+----------+------------+\n|Unique Key|     Borough|\n+----------+------------+\n|  25858951|12 MANHATTAN|\n|  25941458|01 MANHATTAN|\n|  25990044| Unspecified|\n|  26038099|01 MANHATTAN|\n|  26045552|04 MANHATTAN|\n|  26064426|02 MANHATTAN|\n|  26082156|04 MANHATTAN|\n|  26082590|10 MANHATTAN|\n|  26107877|03 MANHATTAN|\n|  26246920|    BROOKLYN|\n|  26258412|01 MANHATTAN|\n|  26270719| Unspecified|\n|  26292618|08 MANHATTAN|\n|  26320156| Unspecified|\n|  26404059|08 MANHATTAN|\n|  26411512|07 MANHATTAN|\n|  26490873|      QUEENS|\n|  26497751|07 MANHATTAN|\n|  26511323|08 MANHATTAN|\n|  26603856| Unspecified|\n+----------+------------+\nonly showing top 20 rows\n\nIncorrect Data for STATEN ISLAND:\n\n+----------+----------------+\n|Unique Key|         Borough|\n+----------+----------------+\n|  25982848|01 STATEN ISLAND|\n|  26400331|02 STATEN ISLAND|\n|  26506865|03 STATEN ISLAND|\n|  26560333|02 STATEN ISLAND|\n|  26614141|02 STATEN ISLAND|\n|  26614147|02 STATEN ISLAND|\n|  27739170|     Unspecified|\n|  28151378|     Unspecified|\n|  28305246|     Unspecified|\n|  28337889|     Unspecified|\n|  28356529|     Unspecified|\n|  28501571|     Unspecified|\n|  28650971|     Unspecified|\n|  28763594|     Unspecified|\n|  28767733|     Unspecified|\n|  28867255|     Unspecified|\n|  28911820|     Unspecified|\n|  28944841|     Unspecified|\n|  28945701|     Unspecified|\n|  28961292|     Unspecified|\n+----------+----------------+\nonly showing top 20 rows\n\nIncorrect Data for QUEENS:\n\n+----------+-----------+\n|Unique Key|    Borough|\n+----------+-----------+\n|  25700001|   BROOKLYN|\n|  25701807|   BROOKLYN|\n|  25703510|   BROOKLYN|\n|  25706322|   BROOKLYN|\n|  25709596|   BROOKLYN|\n|  25719945|Unspecified|\n|  25734060|   BROOKLYN|\n|  25766392|Unspecified|\n|  25825663|Unspecified|\n|  25838332|Unspecified|\n|  25919509|Unspecified|\n|  25931238|   BROOKLYN|\n|  25949286|   BROOKLYN|\n|  25999829|   BROOKLYN|\n|  26000292|  13 QUEENS|\n|  26008141|   BROOKLYN|\n|  26018041|Unspecified|\n|  26020145|Unspecified|\n|  26021741|Unspecified|\n|  26029712|Unspecified|\n+----------+-----------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=11",
              "$$hashKey": "object:8716"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=12",
              "$$hashKey": "object:8717"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=13",
              "$$hashKey": "object:8718"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=14",
              "$$hashKey": "object:8719"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=15",
              "$$hashKey": "object:8720"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=16",
              "$$hashKey": "object:8721"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=17",
              "$$hashKey": "object:8722"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=18",
              "$$hashKey": "object:8723"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067796_669117337",
      "id": "paragraph_1639315250566_1233591741",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "$$hashKey": "object:530",
      "dateFinished": "2021-12-12T23:20:31-0500",
      "dateStarted": "2021-12-12T23:19:01-0500"
    },
    {
      "title": "Validating the boroughs based on ZipCodes",
      "text": "%pyspark\n\ndef validate_borough(df, zip_code, borough):\n    df = df.withColumn(borough, when((col(zip_code) > 11350) & (col(zip_code)<11700),\"QUEENS\")\n                   .when((col(zip_code) > 11200) & (col(zip_code)<11240),\"BROOKLYN\")\n                   .when((col(zip_code)>10450) & (col(zip_code)<10475),\"BRONX\")\n                   .when((col(zip_code)>10000) & (col(zip_code)<10280),\"MANHATTAN\")\n                   .when((col(zip_code)>10300) & (col(zip_code)<10315),\"STATEN ISLAND\")\n                   .otherwise(col(borough)))\n    return df",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:19:08-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067796_22006449",
      "id": "paragraph_1639149389709_800975260",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "$$hashKey": "object:531",
      "dateFinished": "2021-12-12T23:20:31-0500",
      "dateStarted": "2021-12-12T23:19:08-0500"
    },
    {
      "text": "%pyspark\ndef inc_zipToB_map_result(df,zip_code,key,borough):\n    print(\"Incorrect Data for BRONX:\\n\")\n    df.where((col(zip_code) > 10450) & (col(zip_code) < 10475)).select(key,zip_code,borough).show(100)\n    print(\"Incorrect Data for BROOKLYN:\\n\")\n    df.where((col(zip_code) > 11200) & (col(zip_code) < 11240) & (col(borough) == \"BROOKLYN\")).select(key,borough).show()\n    print(\"Incorrect Data for MANHATTAN:\\n\")\n    df.where((col(zip_code) > 10000) & (col(zip_code) < 10280) & (col(borough) == \"MANHATTAN\")).select(key,borough).show()\n    print(\"Incorrect Data for STATEN ISLAND:\\n\")\n    df.where((col(zip_code) > 10300) & (col(zip_code) < 10315) & (col(borough) == \"STATEN ISLAND\")).select(key,borough).show()\n    print(\"Incorrect Data for QUEENS:\\n\")\n    df.where((col(zip_code) > 11350) & (col(zip_code) < 11700) & (col(borough) == \"QUEENS\")).select(key,borough).show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:19:14-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067796_527149040",
      "id": "paragraph_1639333759325_2127659413",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "$$hashKey": "object:532",
      "dateFinished": "2021-12-12T23:20:31-0500",
      "dateStarted": "2021-12-12T23:20:31-0500"
    },
    {
      "text": "%pyspark\ndf = validate_borough(df, zip_code, borough)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:20:40-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067796_1575384341",
      "id": "paragraph_1639315297899_1958193875",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "$$hashKey": "object:533",
      "dateFinished": "2021-12-12T23:20:40-0500",
      "dateStarted": "2021-12-12T23:20:40-0500"
    },
    {
      "title": "For calculating precision for 100 records",
      "text": "%pyspark\n\n# NOTE: we are manually checking precision on top 100 rows for Bronx borough only\n\ninc_zipToB_map_result(df,zip_code,key,borough)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 120,
              "optionOpen": false
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Incorrect Data for BRONX:\n\n+----------+------------+-------+\n|Unique Key|Incident zip|Borough|\n+----------+------------+-------+\n|  25698473|       10464|  BRONX|\n|  25698490|       10461|  BRONX|\n|  25698511|       10461|  BRONX|\n|  25698529|       10465|  BRONX|\n|  25698544|       10467|  BRONX|\n|  25698549|       10473|  BRONX|\n|  25698555|       10458|  BRONX|\n|  25698586|       10458|  BRONX|\n|  25698631|       10473|  BRONX|\n|  25698632|       10451|  BRONX|\n|  25698641|       10470|  BRONX|\n|  25698642|       10453|  BRONX|\n|  25698645|       10468|  BRONX|\n|  25698647|       10468|  BRONX|\n|  25698674|       10467|  BRONX|\n|  25698689|       10463|  BRONX|\n|  25698691|       10462|  BRONX|\n|  25698693|       10467|  BRONX|\n|  25698698|       10457|  BRONX|\n|  25698702|       10458|  BRONX|\n|  25698738|       10462|  BRONX|\n|  25698740|       10466|  BRONX|\n|  25698760|       10467|  BRONX|\n|  25698767|       10470|  BRONX|\n|  25698773|       10473|  BRONX|\n|  25698788|       10452|  BRONX|\n|  25698795|       10467|  BRONX|\n|  25698806|       10467|  BRONX|\n|  25698813|       10459|  BRONX|\n|  25698816|       10468|  BRONX|\n|  25698834|       10469|  BRONX|\n|  25698837|       10467|  BRONX|\n|  25698878|       10472|  BRONX|\n|  25698904|       10466|  BRONX|\n|  25698908|       10456|  BRONX|\n|  25698916|       10465|  BRONX|\n|  25698994|       10467|  BRONX|\n|  25699001|       10458|  BRONX|\n|  25699060|       10466|  BRONX|\n|  25699064|       10464|  BRONX|\n|  25699065|       10465|  BRONX|\n|  25699069|       10469|  BRONX|\n|  25699071|       10467|  BRONX|\n|  25699085|       10456|  BRONX|\n|  25699086|       10472|  BRONX|\n|  25699107|       10465|  BRONX|\n|  25699127|       10469|  BRONX|\n|  25699151|       10467|  BRONX|\n|  25699152|       10464|  BRONX|\n|  25699153|       10464|  BRONX|\n|  25699195|       10464|  BRONX|\n|  25699199|       10473|  BRONX|\n|  25699228|       10466|  BRONX|\n|  25699236|       10461|  BRONX|\n|  25699255|       10456|  BRONX|\n|  25699258|       10468|  BRONX|\n|  25699269|       10452|  BRONX|\n|  25699295|       10464|  BRONX|\n|  25699296|       10454|  BRONX|\n|  25699323|       10453|  BRONX|\n|  25699330|       10458|  BRONX|\n|  25699359|       10459|  BRONX|\n|  25699369|       10467|  BRONX|\n|  25699371|       10456|  BRONX|\n|  25699378|       10463|  BRONX|\n|  25699391|       10453|  BRONX|\n|  25699395|       10456|  BRONX|\n|  25699396|       10458|  BRONX|\n|  25699424|       10473|  BRONX|\n|  25699428|       10465|  BRONX|\n|  25699432|       10464|  BRONX|\n|  25699433|       10454|  BRONX|\n|  25699439|       10463|  BRONX|\n|  25699440|       10467|  BRONX|\n|  25699443|       10457|  BRONX|\n|  25699449|       10466|  BRONX|\n|  25699453|       10458|  BRONX|\n|  25699454|       10466|  BRONX|\n|  25699458|       10460|  BRONX|\n|  25699460|       10468|  BRONX|\n|  25699466|       10465|  BRONX|\n|  25699467|       10472|  BRONX|\n|  25699470|       10472|  BRONX|\n|  25699473|       10473|  BRONX|\n|  25699475|       10473|  BRONX|\n|  25699483|       10458|  BRONX|\n|  25699504|       10464|  BRONX|\n|  25699522|       10456|  BRONX|\n|  25699527|       10455|  BRONX|\n|  25699545|       10466|  BRONX|\n|  25699559|       10457|  BRONX|\n|  25699607|       10465|  BRONX|\n|  25699627|       10452|  BRONX|\n|  25699632|       10465|  BRONX|\n|  25699651|       10452|  BRONX|\n|  25699666|       10457|  BRONX|\n|  25699690|       10458|  BRONX|\n|  25699693|       10451|  BRONX|\n|  25699719|       10468|  BRONX|\n|  25699768|       10472|  BRONX|\n+----------+------------+-------+\nonly showing top 100 rows\n\nIncorrect Data for BROOKLYN:\n\n+----------+--------+\n|Unique Key| Borough|\n+----------+--------+\n|  25698464|BROOKLYN|\n|  25698466|BROOKLYN|\n|  25698470|BROOKLYN|\n|  25698472|BROOKLYN|\n|  25698513|BROOKLYN|\n|  25698546|BROOKLYN|\n|  25698527|BROOKLYN|\n|  25698530|BROOKLYN|\n|  25698536|BROOKLYN|\n|  25698539|BROOKLYN|\n|  25698542|BROOKLYN|\n|  25698550|BROOKLYN|\n|  25698556|BROOKLYN|\n|  25698557|BROOKLYN|\n|  25698583|BROOKLYN|\n|  25698584|BROOKLYN|\n|  25698614|BROOKLYN|\n|  25698622|BROOKLYN|\n|  25698623|BROOKLYN|\n|  25698625|BROOKLYN|\n+----------+--------+\nonly showing top 20 rows\n\nIncorrect Data for MANHATTAN:\n\n+----------+---------+\n|Unique Key|  Borough|\n+----------+---------+\n|  25698458|MANHATTAN|\n|  25698471|MANHATTAN|\n|  25698492|MANHATTAN|\n|  25698514|MANHATTAN|\n|  25698515|MANHATTAN|\n|  25698524|MANHATTAN|\n|  25698528|MANHATTAN|\n|  25698533|MANHATTAN|\n|  25698540|MANHATTAN|\n|  25698558|MANHATTAN|\n|  25698581|MANHATTAN|\n|  25698582|MANHATTAN|\n|  25698587|MANHATTAN|\n|  25698592|MANHATTAN|\n|  25698595|MANHATTAN|\n|  25698621|MANHATTAN|\n|  25698624|MANHATTAN|\n|  25698627|MANHATTAN|\n|  25698628|MANHATTAN|\n|  25698630|MANHATTAN|\n+----------+---------+\nonly showing top 20 rows\n\nIncorrect Data for STATEN ISLAND:\n\n+----------+-------------+\n|Unique Key|      Borough|\n+----------+-------------+\n|  25698512|STATEN ISLAND|\n|  25698541|STATEN ISLAND|\n|  25698554|STATEN ISLAND|\n|  25698588|STATEN ISLAND|\n|  25698640|STATEN ISLAND|\n|  25698643|STATEN ISLAND|\n|  25698749|STATEN ISLAND|\n|  25698761|STATEN ISLAND|\n|  25698779|STATEN ISLAND|\n|  25698793|STATEN ISLAND|\n|  25698838|STATEN ISLAND|\n|  25698880|STATEN ISLAND|\n|  25698890|STATEN ISLAND|\n|  25698898|STATEN ISLAND|\n|  25698937|STATEN ISLAND|\n|  25698941|STATEN ISLAND|\n|  25698942|STATEN ISLAND|\n|  25698956|STATEN ISLAND|\n|  25698959|STATEN ISLAND|\n|  25698967|STATEN ISLAND|\n+----------+-------------+\nonly showing top 20 rows\n\nIncorrect Data for QUEENS:\n\n+----------+-------+\n|Unique Key|Borough|\n+----------+-------+\n|  25698468| QUEENS|\n|  25698469| QUEENS|\n|  25698476| QUEENS|\n|  25698477| QUEENS|\n|  25698491| QUEENS|\n|  25698531| QUEENS|\n|  25698532| QUEENS|\n|  25698535| QUEENS|\n|  25698537| QUEENS|\n|  25698551| QUEENS|\n|  25698552| QUEENS|\n|  25698981| QUEENS|\n|  25698585| QUEENS|\n|  25698590| QUEENS|\n|  25698593| QUEENS|\n|  25698594| QUEENS|\n|  25698635| QUEENS|\n|  25698637| QUEENS|\n|  25698650| QUEENS|\n|  25698652| QUEENS|\n+----------+-------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067796_1538037758",
      "id": "paragraph_1639158388737_235107973",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:534"
    },
    {
      "title": "Finding missing data in City column",
      "text": "%pyspark\n\ndef missing_city_data(df,city,borough):\n    print(\"Missing city data:\\n\")\n    df.where((col(\"City\") ==\"N/A\") | (col(\"City\")==\"NA\") | (col(\"City\").isNull())).select(\"Borough\", \"City\").show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:20:48-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067797_923994897",
      "id": "paragraph_1639242118141_680264122",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "$$hashKey": "object:535",
      "dateFinished": "2021-12-12T23:20:48-0500",
      "dateStarted": "2021-12-12T23:20:48-0500"
    },
    {
      "text": "%pyspark\nmissing_city_data(df,city,borough)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Missing city data:\n\n+-----------+----+\n|    Borough|City|\n+-----------+----+\n|  MANHATTAN|null|\n|   BROOKLYN|null|\n|  MANHATTAN|null|\n|  MANHATTAN|null|\n|  MANHATTAN|null|\n|      BRONX|null|\n|   BROOKLYN|null|\n|      BRONX|null|\n|   BROOKLYN|null|\n|     QUEENS|null|\n|     QUEENS|null|\n|   BROOKLYN|null|\n|      BRONX|null|\n|  MANHATTAN|null|\n|  MANHATTAN|null|\n|Unspecified|null|\n|   BROOKLYN|null|\n|     QUEENS|null|\n|     QUEENS|null|\n|   BROOKLYN|null|\n+-----------+----+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067797_1019936426",
      "id": "paragraph_1639315439744_1958791502",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:536"
    },
    {
      "title": "Standardization of City column",
      "text": "%pyspark\n\ndef standardize_city(df,city,borough):\n    df = df.withColumn(city, when(((col(city).isNull()) | (col(city)==\"N/A\") | (col(city)==\"NA\")) & (col(borough).isNull()),\"New York\")\n           .when(((col(city).isNull()) | (col(city)==\"N/A\") | (col(city)==\"NA\")) & (col(borough).isNotNull()), col(borough))\n           .otherwise(col(city)))\n        \n    return df",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:20:53-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067797_834419783",
      "id": "paragraph_1639241874398_292483738",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "$$hashKey": "object:537",
      "dateFinished": "2021-12-12T23:20:53-0500",
      "dateStarted": "2021-12-12T23:20:53-0500"
    },
    {
      "text": "%pyspark\n\ndf = standardize_city(df, city, borough)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:21:29-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067797_1084023747",
      "id": "paragraph_1639315476981_446044616",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "$$hashKey": "object:538",
      "dateFinished": "2021-12-12T23:21:29-0500",
      "dateStarted": "2021-12-12T23:21:29-0500"
    },
    {
      "title": "Remove cities that are not NYC, since these are the outliers",
      "text": "%pyspark\ndef cleanNonNYC(df, city):\n    df = df.where(col(city).toUpperCase() == \"NEW YORK\" | col(city))",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:21:35-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067797_1774322082",
      "id": "paragraph_1639327055153_1763971565",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "$$hashKey": "object:539",
      "dateFinished": "2021-12-12T23:21:35-0500",
      "dateStarted": "2021-12-12T23:21:35-0500"
    },
    {
      "title": "Shows that Generalization was applied for Missing City to New York",
      "text": "%pyspark\nmissing_city_data(df,city,borough)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:21:40-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Missing city data:\n\n+-------+----+\n|Borough|City|\n+-------+----+\n+-------+----+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=19",
              "$$hashKey": "object:8844"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=20",
              "$$hashKey": "object:8845"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=21",
              "$$hashKey": "object:8846"
            },
            {
              "jobUrl": "http://hc01.nyu.cluster:34203/jobs/job?id=22",
              "$$hashKey": "object:8847"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067797_1206207963",
      "id": "paragraph_1639242360970_84729856",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "FINISHED",
      "$$hashKey": "object:540",
      "dateFinished": "2021-12-12T23:27:55-0500",
      "dateStarted": "2021-12-12T23:21:40-0500"
    },
    {
      "title": "Drop x and y coordinates since we already have location",
      "text": "%pyspark\ndef drop_x_y(df):\n    df = df.drop('X Coordinate (State Plane)')\n    df = df.drop('Y Coordinate (State Plane)')\n    return df",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067797_1614741494",
      "id": "paragraph_1639272632520_1391654010",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:541"
    },
    {
      "text": "%pyspark\ndf = drop_x_y(df)\ndf.printSchema()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- Unique Key: string (nullable = true)\n |-- Created Date: string (nullable = true)\n |-- Closed Date: string (nullable = true)\n |-- Agency: string (nullable = true)\n |-- Agency Name: string (nullable = true)\n |-- Complaint Type: string (nullable = true)\n |-- Descriptor: string (nullable = true)\n |-- Location Type: string (nullable = true)\n |-- Incident zip: integer (nullable = true)\n |-- Incident Address: string (nullable = true)\n |-- Street Name: string (nullable = true)\n |-- Cross Street 1: string (nullable = true)\n |-- Cross Street 2: string (nullable = true)\n |-- Intersection Street 1: string (nullable = true)\n |-- Intersection Street 2: string (nullable = true)\n |-- Address Type: string (nullable = true)\n |-- City: string (nullable = true)\n |-- Landmark: string (nullable = true)\n |-- Facility Type: string (nullable = true)\n |-- Status: string (nullable = true)\n |-- Due Date: string (nullable = true)\n |-- Resolution Description: string (nullable = true)\n |-- Resolution Action Updated Date: string (nullable = true)\n |-- Community Board: string (nullable = true)\n |-- BBL: string (nullable = true)\n |-- Borough: string (nullable = true)\n |-- Open Data Channel Type: string (nullable = true)\n |-- Park Facility Name: string (nullable = true)\n |-- Park Borough: string (nullable = true)\n |-- Vehicle Type: string (nullable = true)\n |-- Taxi Company Borough: string (nullable = true)\n |-- Taxi Pick Up Location: string (nullable = true)\n |-- Bridge Highway Name: string (nullable = true)\n |-- Bridge Highway Direction: string (nullable = true)\n |-- Road Ramp: string (nullable = true)\n |-- Bridge Highway Segment: string (nullable = true)\n |-- Latitude: string (nullable = true)\n |-- Longitude: string (nullable = true)\n |-- Location: string (nullable = true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067797_1683750482",
      "id": "paragraph_1639317980322_877081703",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:542"
    },
    {
      "title": "Drop Latitude and Longitude since we already have location",
      "text": "%pyspark\ndef drop_lat_long(df):\n    df = df.drop('')\n    df = df.drop('Longitude')\n    return df",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067797_1087517926",
      "id": "paragraph_1639272640515_2008536554",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:543"
    },
    {
      "text": "%pyspark\ndf = drop_lat_long(df)\ndf.printSchema()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- Unique Key: string (nullable = true)\n |-- Created Date: string (nullable = true)\n |-- Closed Date: string (nullable = true)\n |-- Agency: string (nullable = true)\n |-- Agency Name: string (nullable = true)\n |-- Complaint Type: string (nullable = true)\n |-- Descriptor: string (nullable = true)\n |-- Location Type: string (nullable = true)\n |-- Incident zip: integer (nullable = true)\n |-- Incident Address: string (nullable = true)\n |-- Street Name: string (nullable = true)\n |-- Cross Street 1: string (nullable = true)\n |-- Cross Street 2: string (nullable = true)\n |-- Intersection Street 1: string (nullable = true)\n |-- Intersection Street 2: string (nullable = true)\n |-- Address Type: string (nullable = true)\n |-- City: string (nullable = true)\n |-- Landmark: string (nullable = true)\n |-- Facility Type: string (nullable = true)\n |-- Status: string (nullable = true)\n |-- Due Date: string (nullable = true)\n |-- Resolution Description: string (nullable = true)\n |-- Resolution Action Updated Date: string (nullable = true)\n |-- Community Board: string (nullable = true)\n |-- BBL: string (nullable = true)\n |-- Borough: string (nullable = true)\n |-- Open Data Channel Type: string (nullable = true)\n |-- Park Facility Name: string (nullable = true)\n |-- Park Borough: string (nullable = true)\n |-- Vehicle Type: string (nullable = true)\n |-- Taxi Company Borough: string (nullable = true)\n |-- Taxi Pick Up Location: string (nullable = true)\n |-- Bridge Highway Name: string (nullable = true)\n |-- Bridge Highway Direction: string (nullable = true)\n |-- Road Ramp: string (nullable = true)\n |-- Bridge Highway Segment: string (nullable = true)\n |-- Latitude: string (nullable = true)\n |-- Location: string (nullable = true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067797_1510921556",
      "id": "paragraph_1639318028426_954741974",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:544"
    },
    {
      "title": "Setting Variables for the following merging of data",
      "text": "%pyspark\n\ncs1 = \"Cross Street 1\"\ncs2 = \"Cross Street 2\"\nis1 = \"Intersection Street 1\"\nis2 = \"Intersection Street 2\"\nparkb = \"Park Borough\"",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067797_1282166269",
      "id": "paragraph_1639315837546_1499111043",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:545"
    },
    {
      "title": "Union Cross Street with Intersection Street",
      "text": "%pyspark\n\ndef street_merge(df, cs1, cs2, is1, is2):\n    df = df.withColumn(cs1, when((col(cs1).isNull()), col(is1))\n            .otherwise(col(cs1)))\n            \n    df = df.withColumn(\"cs2\", when((col(cs2).isNull()), col(is2))\n            .otherwise(col(cs2)))\n            \n    df = df.drop(is1, is2)\n    \n    return df",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067798_1827823252",
      "id": "paragraph_1639261389832_1664353502",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:546"
    },
    {
      "text": "%pyspark\ndf = street_merge(df, cs1, cs2, is1, is2)\ndf.printSchema()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- Unique Key: string (nullable = true)\n |-- Created Date: string (nullable = true)\n |-- Closed Date: string (nullable = true)\n |-- Agency: string (nullable = true)\n |-- Agency Name: string (nullable = true)\n |-- Complaint Type: string (nullable = true)\n |-- Descriptor: string (nullable = true)\n |-- Location Type: string (nullable = true)\n |-- Incident zip: integer (nullable = true)\n |-- Incident Address: string (nullable = true)\n |-- Street Name: string (nullable = true)\n |-- Cross Street 1: string (nullable = true)\n |-- Cross Street 2: string (nullable = true)\n |-- Address Type: string (nullable = true)\n |-- City: string (nullable = true)\n |-- Landmark: string (nullable = true)\n |-- Facility Type: string (nullable = true)\n |-- Status: string (nullable = true)\n |-- Due Date: string (nullable = true)\n |-- Resolution Description: string (nullable = true)\n |-- Resolution Action Updated Date: string (nullable = true)\n |-- Community Board: string (nullable = true)\n |-- BBL: string (nullable = true)\n |-- Borough: string (nullable = true)\n |-- Open Data Channel Type: string (nullable = true)\n |-- Park Facility Name: string (nullable = true)\n |-- Park Borough: string (nullable = true)\n |-- Vehicle Type: string (nullable = true)\n |-- Taxi Company Borough: string (nullable = true)\n |-- Taxi Pick Up Location: string (nullable = true)\n |-- Bridge Highway Name: string (nullable = true)\n |-- Bridge Highway Direction: string (nullable = true)\n |-- Road Ramp: string (nullable = true)\n |-- Bridge Highway Segment: string (nullable = true)\n |-- Latitude: string (nullable = true)\n |-- Location: string (nullable = true)\n |-- cs2: string (nullable = true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067798_62208518",
      "id": "paragraph_1639316482194_29888267",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:547"
    },
    {
      "title": "Union Park Boroughs with Boroughs",
      "text": "%pyspark\n\ndef parkb_merge(df,borough,parkb):\n    df = df.withColumn(borough, when((col(borough).isNull()), col(parkb))\n            .otherwise(col(borough)))\n            \n    df = df.drop(parkb)\n    return df",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067798_1436713794",
      "id": "paragraph_1639261421748_1785104800",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:548"
    },
    {
      "text": "%pyspark\ndf = parkb_merge(df, borough, parkb)\ndf.printSchema()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- Unique Key: string (nullable = true)\n |-- Created Date: string (nullable = true)\n |-- Closed Date: string (nullable = true)\n |-- Agency: string (nullable = true)\n |-- Agency Name: string (nullable = true)\n |-- Complaint Type: string (nullable = true)\n |-- Descriptor: string (nullable = true)\n |-- Location Type: string (nullable = true)\n |-- Incident zip: integer (nullable = true)\n |-- Incident Address: string (nullable = true)\n |-- Street Name: string (nullable = true)\n |-- Cross Street 1: string (nullable = true)\n |-- Cross Street 2: string (nullable = true)\n |-- Address Type: string (nullable = true)\n |-- City: string (nullable = true)\n |-- Landmark: string (nullable = true)\n |-- Facility Type: string (nullable = true)\n |-- Status: string (nullable = true)\n |-- Due Date: string (nullable = true)\n |-- Resolution Description: string (nullable = true)\n |-- Resolution Action Updated Date: string (nullable = true)\n |-- Community Board: string (nullable = true)\n |-- BBL: string (nullable = true)\n |-- Borough: string (nullable = true)\n |-- Open Data Channel Type: string (nullable = true)\n |-- Park Facility Name: string (nullable = true)\n |-- Vehicle Type: string (nullable = true)\n |-- Taxi Company Borough: string (nullable = true)\n |-- Taxi Pick Up Location: string (nullable = true)\n |-- Bridge Highway Name: string (nullable = true)\n |-- Bridge Highway Direction: string (nullable = true)\n |-- Road Ramp: string (nullable = true)\n |-- Bridge Highway Segment: string (nullable = true)\n |-- Latitude: string (nullable = true)\n |-- Location: string (nullable = true)\n |-- cs2: string (nullable = true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067798_2094751652",
      "id": "paragraph_1639316527527_1865931632",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:549"
    },
    {
      "title": "Checking if Created Date has any future date",
      "text": "%pyspark\n\ndf.where((col(\"Created Date\")>current_date())).select(\"Created Date\").show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------------+\n|Created Date|\n+------------+\n+------------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067798_342938924",
      "id": "paragraph_1639243386332_557357707",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:550"
    },
    {
      "text": "%pyspark\n\n# turning the code above into a fucntion \n\ndef show_dates_in_the_future(data_frame, date_col_name):\n    data_frame.where((col(date_col_name)>current_date())).select(date_col_name).show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067798_1870943753",
      "id": "paragraph_1639361635056_1700641240",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:551"
    },
    {
      "title": "Filtering all rows where Created Date is less than or equal future date",
      "text": "%pyspark\n\ndf = df.filter(df[\"Created Date\"] <= current_date())",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067798_415382994",
      "id": "paragraph_1639254882348_1147901717",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:552"
    },
    {
      "title": "For closed tickets updating Close date if it is null with Resolution Action Updated Date",
      "text": "%pyspark\n\ndef update_close_dt(df, closed_dt=\"Closed Date\", status=\"Status\", res_aud=\"Resolution Action Updated Date\"):\n    df = df.withColumn(closed_dt, when((col(closed_dt).isNull()) & (col(status)=='Closed') &(col(res_aud).isNotNull()),col(res_aud)).otherwise(col(closed_dt)))\n\n    df = df.withColumn(res_aud, when((col(res_aud).isNull()) & (col(status)=='Closed') &(col(closed_dt).isNotNull()),col(closed_dt)).otherwise(col(res_aud)))\n    return df\n",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067799_699073004",
      "id": "paragraph_1639245428315_292458989",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:553"
    },
    {
      "text": "%pyspark\ndf = update_close_dt(df)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067799_189610442",
      "id": "paragraph_1639318812936_2100420000",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:554"
    },
    {
      "title": "Showing the records where the agency name is incorrect.",
      "text": "%pyspark\ndef agency_incorrect_display(df):\n    df.where((col(\"Agency\")== \"NYPD\") & (col(\"Agency Name\") != \"New York City Police Department\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"HPD\") & (col(\"Agency Name\") != \"Department of Housing Preservation and Development\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"DOT\") & (col(\"Agency Name\") != \"Department of Transportation\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"DSNY\") & (col(\"Agency Name\") != \"Department of Sanitation\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"DEP\") & (col(\"Agency Name\") != \"Department of Environmental Protection\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"DOB\") & (col(\"Agency Name\") != \"Department of Buildings\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"DPR\") & (col(\"Agency Name\") != \"Department of Parks and Recreation\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"DOHMH\") & (col(\"Agency Name\") != \"Department of Health and Mental Hygiene\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"DOF\") & (col(\"Agency Name\") != \"Department of Finance\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"TLC\") & (col(\"Agency Name\") != \"Taxi and Limouisine Commission\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"DHS\") & (col(\"Agency Name\") != \"Department of Homeless Services\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"DCA\") & (col(\"Agency Name\") != \"Department of Consumer Affairs\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"HRA\") & (col(\"Agency Name\") != \"Human Resources Administration\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"DFTA\") & (col(\"Agency Name\") != \"Department for the Aging\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"MAYORâ€  S OFFICE OF SPECIAL ENFORCEMENT\") & (col(\"Agency Name\") != \"Mayor's Office of Special Enforcement\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"EDC\") & (col(\"Agency Name\") != \"Economic Development Corporation\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"DOE\") & (col(\"Agency Name\") != \"Department of Education\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"3-1-1\") & (col(\"Agency Name\") != \"3-1-1 Call Center\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"NYCEM\") & (col(\"Agency Name\") != \"NYC Emergency Management\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"DOITT\") & (col(\"Agency Name\") != \"Department of Information Technology and Telecommunications\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"DCAS\") & (col(\"Agency Name\") != \"Department of Citywide Administrative Services\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"ACS\") & (col(\"Agency Name\") != \"Administration for Children's Services\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"TAX\") & (col(\"Agency Name\") != \"Tax Commission\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"DVS\") & (col(\"Agency Name\") != \"Department of Veteran's Services\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"DCP\") & (col(\"Agency Name\") != \"Department of City Plannning\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"DORIS\") & (col(\"Agency Name\") != \"Department of Records and Information Services\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"FDNY\") & (col(\"Agency Name\") != \"Fire Department of New York\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"TAT\") & (col(\"Agency Name\") != \"Tax Appeals Tribunal\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"COIB\") & (col(\"Agency Name\") != \"Conflicts of Interest Board\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"CEO\") & (col(\"Agency Name\") != \"Center for Economic Opportunity\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"MOC\") & (col(\"Agency Name\") != \"Mayor's Office of Contracts\")).select(\"Agency\", \"Agency Name\").show()\n    df.where((col(\"Agency\")== \"OMB\") & (col(\"Agency Name\") != \"Office of Management and Budget\")).select(\"Agency\", \"Agency Name\").show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067799_1060972889",
      "id": "paragraph_1639261903124_1772874522",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:555"
    },
    {
      "text": "%pyspark\nagency_incorrect_display(df)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------+--------------------+\n|Agency|         Agency Name|\n+------+--------------------+\n|  NYPD|                NYPD|\n|  NYPD|                NYPD|\n|  NYPD|                NYPD|\n|  NYPD|                NYPD|\n|  NYPD|                NYPD|\n|  NYPD|                NYPD|\n|  NYPD|                NYPD|\n|  NYPD|                NYPD|\n|  NYPD|                NYPD|\n|  NYPD|                NYPD|\n|  NYPD|                NYPD|\n|  NYPD|                NYPD|\n|  NYPD|                NYPD|\n|  NYPD|                NYPD|\n|  NYPD|Investigation Rev...|\n|  NYPD|Investigation Rev...|\n|  NYPD|Investigation Rev...|\n|  NYPD|                NYPD|\n|  NYPD|                NYPD|\n|  NYPD|                NYPD|\n+------+--------------------+\nonly showing top 20 rows\n\n+------+--------------------+\n|Agency|         Agency Name|\n+------+--------------------+\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n|   HPD|Division of Alter...|\n+------+--------------------+\nonly showing top 20 rows\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n|   DOT|        DOT|\n+------+-----------+\nonly showing top 20 rows\n\n+------+--------------------+\n|Agency|         Agency Name|\n+------+--------------------+\n|  DSNY|BCC - Brooklyn South|\n|  DSNY|         BCC - Bronx|\n|  DSNY|      Queens West 04|\n|  DSNY|      Queens West 06|\n|  DSNY|        A - Brooklyn|\n|  DSNY|        Manhattan 04|\n|  DSNY|        Manhattan 03|\n|  DSNY|   BCC - Queens West|\n|  DSNY|      Queens West 06|\n|  DSNY|BCC - Brooklyn South|\n|  DSNY|   BCC - Queens East|\n|  DSNY|     BCC - Manhattan|\n|  DSNY|BCC - Brooklyn North|\n|  DSNY|      Queens East 12|\n|  DSNY|        Lot Cleaning|\n|  DSNY|        Manhattan 08|\n|  DSNY|       A - Manhattan|\n|  DSNY|BCC - Brooklyn South|\n|  DSNY|           A - Bronx|\n|  DSNY|BCC - Brooklyn North|\n+------+--------------------+\nonly showing top 20 rows\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+--------------------+\n|Agency|         Agency Name|\n+------+--------------------+\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n|   DOB|DOB Inspections -...|\n+------+--------------------+\nonly showing top 20 rows\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n|   DPR|        DPR|\n+------+-----------+\nonly showing top 20 rows\n\n+------+--------------------+\n|Agency|         Agency Name|\n+------+--------------------+\n| DOHMH|               DOHMH|\n| DOHMH|               DOHMH|\n| DOHMH|               DOHMH|\n| DOHMH|               DOHMH|\n| DOHMH|               DOHMH|\n| DOHMH|Child Care and Ca...|\n| DOHMH|Child Care and Ca...|\n| DOHMH|Child Care and Ca...|\n| DOHMH|Child Care and Ca...|\n| DOHMH|Child Care and Ca...|\n| DOHMH|Child Care and Ca...|\n| DOHMH|Child Care and Ca...|\n| DOHMH|Child Care and Ca...|\n| DOHMH|Child Care and Ca...|\n| DOHMH|Child Care and Ca...|\n| DOHMH|Child Care and Ca...|\n| DOHMH|Child Care and Ca...|\n| DOHMH|Child Care and Ca...|\n| DOHMH|Child Care and Ca...|\n| DOHMH|Child Care and Ca...|\n+------+--------------------+\nonly showing top 20 rows\n\n+------+--------------------+\n|Agency|         Agency Name|\n+------+--------------------+\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n|   DOF|Senior Citizen Re...|\n+------+--------------------+\nonly showing top 20 rows\n\n+------+--------------------+\n|Agency|         Agency Name|\n+------+--------------------+\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n|   TLC|Taxi and Limousin...|\n+------+--------------------+\nonly showing top 20 rows\n\n+------+--------------------+\n|Agency|         Agency Name|\n+------+--------------------+\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n|   DHS|Operations Unit -...|\n+------+--------------------+\nonly showing top 20 rows\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n|   DCA|        DCA|\n|   DCA|        DCA|\n|   DCA|        DCA|\n|   DCA|        DCA|\n+------+-----------+\n\n+------+--------------------+\n|Agency|         Agency Name|\n+------+--------------------+\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n|   HRA|HRA Benefit Card ...|\n+------+--------------------+\nonly showing top 20 rows\n\n+------+--------------------+\n|Agency|         Agency Name|\n+------+--------------------+\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n|  DFTA|HealthCare Connec...|\n+------+--------------------+\nonly showing top 20 rows\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+--------------------+\n|Agency|         Agency Name|\n+------+--------------------+\n|   DOE|School - PS 88 Se...|\n|   DOE|School - MS 172 I...|\n|   DOE|School - PS 75 Em...|\n|   DOE|School - PS 166 H...|\n|   DOE|School - PS 127 A...|\n|   DOE|Central - Departm...|\n|   DOE|     School - PS 239|\n|   DOE|School - IS 119 T...|\n|   DOE|     School - PS 189|\n|   DOE|School - All City...|\n|   DOE|School - IS 125 T...|\n|   DOE|School - Harbor S...|\n|   DOE|School - PS 106 E...|\n|   DOE|School - PS 129 P...|\n|   DOE|School - IS 51 Ed...|\n|   DOE|School - PS 57 Cr...|\n|   DOE|School - PS 40 Au...|\n|   DOE|School - PS 197 J...|\n|   DOE|School - Bronx Re...|\n|   DOE|School - High Sch...|\n+------+--------------------+\nonly showing top 20 rows\n\n+------+--------------------+\n|Agency|         Agency Name|\n+------+--------------------+\n| 3-1-1|               3-1-1|\n| 3-1-1|311 Administrativ...|\n| 3-1-1|               3-1-1|\n| 3-1-1|               3-1-1|\n| 3-1-1|               3-1-1|\n| 3-1-1|               3-1-1|\n| 3-1-1|               3-1-1|\n| 3-1-1|               3-1-1|\n| 3-1-1|311 Administrativ...|\n| 3-1-1|311 Administrativ...|\n| 3-1-1|               3-1-1|\n| 3-1-1|               3-1-1|\n| 3-1-1|               3-1-1|\n| 3-1-1|               3-1-1|\n| 3-1-1|               3-1-1|\n| 3-1-1|               3-1-1|\n| 3-1-1|               3-1-1|\n+------+--------------------+\n\n+------+--------------------+\n|Agency|         Agency Name|\n+------+--------------------+\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n| NYCEM|NYCEM Property Da...|\n+------+--------------------+\nonly showing top 20 rows\n\n+------+------------+\n|Agency| Agency Name|\n+------+------------+\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n| DOITT|LinkNYC Unit|\n+------+------------+\nonly showing top 20 rows\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n|  DCAS|       DCAS|\n+------+-----------+\nonly showing top 20 rows\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n|   ACS|        ACS|\n+------+-----------+\nonly showing top 20 rows\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n|   TAX|        TAX|\n+------+-----------+\nonly showing top 20 rows\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n|   DVS|        DVS|\n+------+-----------+\nonly showing top 20 rows\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n|   DCP|        DCP|\n+------+-----------+\nonly showing top 20 rows\n\n+------+------------------+\n|Agency|       Agency Name|\n+------+------------------+\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n| DORIS|Municipal Archives|\n+------+------------------+\nonly showing top 20 rows\n\n+------+--------------------+\n|Agency|         Agency Name|\n+------+--------------------+\n|  FDNY|Fire Department O...|\n|  FDNY|Fire Department O...|\n+------+--------------------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n|   TAT|        TAT|\n+------+-----------+\nonly showing top 20 rows\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n|  COIB|       COIB|\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n|   CEO|        CEO|\n|   CEO|        CEO|\n|   CEO|        CEO|\n|   CEO|        CEO|\n|   CEO|        CEO|\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n|   MOC|        MOC|\n|   MOC|        MOC|\n|   MOC|        MOC|\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n|   OMB|        OMB|\n|   OMB|        OMB|\n+------+-----------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067799_443751396",
      "id": "paragraph_1639318494429_407573640",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:556"
    },
    {
      "title": "Correcting the records where the agency name is incorrect",
      "text": "%pyspark\n\ndef agency_name_correction(df):\n\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"NYPD\"),\"New York City Police Department\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"HPD\"),\"Department of Housing Preservation and Development\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"DOT\"),\"Department of Transportation\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"DSNY\"),\"Department of Sanitation\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"DEP\"),\"Department of Environmental Protection\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"DOB\"),\"Department of Buildings\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"DPR\"),\"Department of Parks and Recreation\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"DOHMH\"),\"Department of Health and Mental Hygiene\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"DOF\"),\"Department of Finance\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"TLC\"),\"Taxi and Limouisine Commission\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"DHS\"),\"Department of Homeless Services\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"DCA\"),\"Department of Consumer Affairs\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"HRA\"),\"Human Resources Administration\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"DFTA\"),\"Department for the Aging\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"MAYORâ€  S OFFICE OF SPECIAL ENFORCEMENT\"),\"Mayor's Office of Special Enforcement\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"EDC\"),\"Economic Development Corporation\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"DOE\"),\"Department of Education\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"3-1-1\"),\"3-1-1 Call Center\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"NYCEM\"),\"NYC Emergency Management\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"DOITT\"),\"Department of Information Technology and Telecommunications\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"DCAS\"),\"Department of Citywide Administrative Services\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"ACS\"),\"Administration for Children's Service\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"TAX\"),\"Tax Commission\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"DVS\"),\"Department of Veteran's Services\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"DCP\"),\"Department of City Plannning\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"DORIS\"),\"Department of Records and Information Services\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"FDNY\"),\"Fire Department of New York\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"TAT\"),\"Tax Appeals Tribunal\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"COIB\"),\"Conflicts of Interest Board\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"CEO\"),\"Center for Economic Opportunity\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"MOC\"),\"Mayor's Office of Contracts\").otherwise(col(\"Agency Name\")))\n    df = df.withColumn(\"Agency Name\", when((col(\"Agency\") == \"OMB\"),\"Office of Management and Budget\").otherwise(col(\"Agency Name\")))\n    return df\n",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067800_1414583810",
      "id": "paragraph_1639265007912_1669762534",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:557"
    },
    {
      "text": "%pyspark\ndf= agency_name_correction(df)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067800_1286289163",
      "id": "paragraph_1639318468840_482933877",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:558"
    },
    {
      "title": "Showing that the records are corrected.",
      "text": "%pyspark\nagency_incorrect_display(df)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+--------------------+\n|Agency|         Agency Name|\n+------+--------------------+\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n|   ACS|Administration fo...|\n+------+--------------------+\nonly showing top 20 rows\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n+------+-----------+\n|Agency|Agency Name|\n+------+-----------+\n+------+-----------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067800_1873836545",
      "id": "paragraph_1639319967039_1805001870",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:559"
    },
    {
      "title": "Detecting outliers in Complaint Types",
      "text": "%pyspark\n\ndef complaint_outliers_display(df):\n    df.where((col(\"Complaint Type\").contains(\"Noise\")) & (col(\"Complaint Type\")!= \"Noise Complaint\")).select(\"Unique Key\", \"Complaint Type\").show()\n    df.where((col(\"Complaint Type\").contains(\"Ferry\")) & (col(\"Complaint Type\")!= \"Ferry Complaint\")).select(\"Unique Key\", \"Complaint Type\").show()\n    df.where((col(\"Complaint Type\").contains(\"Highway\")) & (col(\"Complaint Type\")!= \"Highway Complaint\")).select(\"Unique Key\", \"Complaint Type\").show()\n    df.where((col(\"Complaint Type\").contains(\"Taxi\")) & (col(\"Complaint Type\")!= \"Taxi Complaint\")).select(\"Unique Key\", \"Complaint Type\").show()\n    df.where((col(\"Complaint Type\").contains(\"Water\")) & (col(\"Complaint Type\")!= \"Water Complaint\")).select(\"Unique Key\", \"Complaint Type\").show()\n    df.where((col(\"Complaint Type\").contains(\"Parking\")) & (col(\"Complaint Type\")!= \"Parking Complaint\")).select(\"Unique Key\", \"Complaint Type\").show()\n    df.where((col(\"Complaint Type\").contains(\"Blocked Driveway\")) & (col(\"Complaint Type\")!= \"Blocked Driveway Complaint\")).select(\"Unique Key\", \"Complaint Type\").show()\n    df.where((col(\"Complaint Type\").contains(\"Street\")) & (col(\"Complaint Type\")!= \"Street Complaint\")).select(\"Unique Key\", \"Complaint Type\").show()\n    df.where((col(\"Complaint Type\").contains(\"Heating\")) & (col(\"Complaint Type\")!= \"Heat Complaint\")).select(\"Unique Key\", \"Complaint Type\").show()\n    df.where((col(\"Complaint Type\").contains(\"Plumbing\")) & (col(\"Complaint Type\")!= \"Plumbing Complaint\")).select(\"Unique Key\", \"Complaint Type\").show()\n    df.where((col(\"Complaint Type\").contains(\"unsanitary condition\")) & (col(\"Complaint Type\")!= \"Unsanitary condition Complaint\")).select(\"Unique Key\", \"Complaint Type\").show()\n    df.where((col(\"Complaint Type\").contains(\"construction\")) & (col(\"Complaint Type\")!= \"Construction Complaint\")).select(\"Unique Key\", \"Complaint Type\").show()\n    df.where((col(\"Complaint Type\").contains(\"traffic\")) & (col(\"Complaint Type\")!= \"Traffic Complaint\")).select(\"Unique Key\", \"Complaint Type\").show()\n    df.where((col(\"Complaint Type\").contains(\"sewer\")) & (col(\"Complaint Type\")!= \"Sewer Complaint\")).select(\"Unique Key\", \"Complaint Type\").show()\n",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067800_1459853361",
      "id": "paragraph_1639266097402_806251114",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:560"
    },
    {
      "text": "%pyspark\ncomplaint_outliers_display(df)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----------+-------------------+\n|Unique Key|     Complaint Type|\n+----------+-------------------+\n|  25698529|Noise - Residential|\n|  25698531|Noise - Residential|\n|  25698532|Noise - Residential|\n|  25698535|Noise - Residential|\n|  25698536|Noise - Residential|\n|  25698537|Noise - Residential|\n|  25698539|Noise - Residential|\n|  25698540|Noise - Residential|\n|  25698541|Noise - Residential|\n|  25698542|Noise - Residential|\n|  25698583| Noise - Commercial|\n|  25698584| Noise - Commercial|\n|  25698585|Noise - Residential|\n|  25698586|Noise - Residential|\n|  25698587|Noise - Residential|\n|  25698588|Noise - Residential|\n|  25698590|Noise - Residential|\n|  25698592|Noise - Residential|\n|  25698593|Noise - Residential|\n|  25698594|Noise - Residential|\n+----------+-------------------+\nonly showing top 20 rows\n\n+----------+--------------+\n|Unique Key|Complaint Type|\n+----------+--------------+\n|  29141650| Ferry Inquiry|\n|  29143538| Ferry Inquiry|\n|  29158161| Ferry Inquiry|\n|  29158162| Ferry Inquiry|\n|  29162588| Ferry Inquiry|\n|  29163734| Ferry Inquiry|\n|  29166467| Ferry Inquiry|\n|  29177345| Ferry Inquiry|\n|  29178157| Ferry Inquiry|\n|  29216499| Ferry Inquiry|\n|  29184285| Ferry Inquiry|\n|  29190991| Ferry Inquiry|\n|  29220713| Ferry Inquiry|\n|  29218832| Ferry Inquiry|\n|  29218005| Ferry Inquiry|\n|  29217618|  Ferry Permit|\n|  29219032| Ferry Inquiry|\n|  29224087| Ferry Inquiry|\n|  29223055| Ferry Inquiry|\n|  29224088| Ferry Inquiry|\n+----------+--------------+\nonly showing top 20 rows\n\n+----------+-----------------+\n|Unique Key|   Complaint Type|\n+----------+-----------------+\n|  25698715|Highway Condition|\n|  25699574|Highway Condition|\n|  25699798|Highway Condition|\n|  25700001|Highway Condition|\n|  25700122|Highway Condition|\n|  25700123|Highway Condition|\n|  25700124|Highway Condition|\n|  25700125|Highway Condition|\n|  25700697|Highway Condition|\n|  25700813|Highway Condition|\n|  25700814|Highway Condition|\n|  25700815|Highway Condition|\n|  25701381|Highway Condition|\n|  25701560|Highway Condition|\n|  25701807|Highway Condition|\n|  25702102|Highway Condition|\n|  25702748|Highway Condition|\n|  25703311|Highway Condition|\n|  25703374|Highway Condition|\n|  25703510|Highway Condition|\n+----------+-----------------+\nonly showing top 20 rows\n\n+----------+--------------+\n|Unique Key|Complaint Type|\n+----------+--------------+\n|  29118692|   Taxi Report|\n|  29119618|   Taxi Report|\n|  29120283|   Taxi Report|\n|  29121248|   Taxi Report|\n|  29122127|   Taxi Report|\n|  29123312|   Taxi Report|\n|  29124008|   Taxi Report|\n|  29124009|   Taxi Report|\n|  29129215|   Taxi Report|\n|  29129216|   Taxi Report|\n|  29129448|   Taxi Report|\n|  29130736|   Taxi Report|\n|  29131746|   Taxi Report|\n|  29133231|   Taxi Report|\n|  29134504|   Taxi Report|\n|  29134578|   Taxi Report|\n|  29137328|   Taxi Report|\n|  29140637|   Taxi Report|\n|  29141521|   Taxi Report|\n|  29146532|   Taxi Report|\n+----------+--------------+\nonly showing top 20 rows\n\n+----------+------------------+\n|Unique Key|    Complaint Type|\n+----------+------------------+\n|  25698895|      Water System|\n|  25698898|      Water System|\n|  25698899|    Standing Water|\n|  25698904|    Standing Water|\n|  25698965|      Water System|\n|  25698969|      Water System|\n|  25698970|      Water System|\n|  25698971|      Water System|\n|  25699000|    Standing Water|\n|  25699069|      Water System|\n|  25699070|      Water System|\n|  25699071|      Water System|\n|  25699072|      Water System|\n|  25699073|      Water System|\n|  25699606|    Standing Water|\n|  25699607|    Standing Water|\n|  25699659|Water Conservation|\n|  25699660|      Water System|\n|  25699661|      Water System|\n|  25699665|      Water System|\n+----------+------------------+\nonly showing top 20 rows\n\n+----------+---------------+\n|Unique Key| Complaint Type|\n+----------+---------------+\n|  25698466|Illegal Parking|\n|  25698468|Illegal Parking|\n|  25698469|Illegal Parking|\n|  25698470|Illegal Parking|\n|  25698471|Illegal Parking|\n|  25698472|Illegal Parking|\n|  25698473|Illegal Parking|\n|  25698477|Illegal Parking|\n|  25698546|Illegal Parking|\n|  25698524|Illegal Parking|\n|  25698544|Illegal Parking|\n|  25698549|Illegal Parking|\n|  25698550|Illegal Parking|\n|  25698551|Illegal Parking|\n|  25698552|Illegal Parking|\n|  25698554|Illegal Parking|\n|  25698555|Illegal Parking|\n|  25698556|Illegal Parking|\n|  25698557|Illegal Parking|\n|  25698558|Illegal Parking|\n+----------+---------------+\nonly showing top 20 rows\n\n+----------+----------------+\n|Unique Key|  Complaint Type|\n+----------+----------------+\n|  25698832|Blocked Driveway|\n|  25698833|Blocked Driveway|\n|  25698834|Blocked Driveway|\n|  25698835|Blocked Driveway|\n|  25698836|Blocked Driveway|\n|  25698837|Blocked Driveway|\n|  25698838|Blocked Driveway|\n|  25698875|Blocked Driveway|\n|  25698876|Blocked Driveway|\n|  25698877|Blocked Driveway|\n|  25698878|Blocked Driveway|\n|  25698879|Blocked Driveway|\n|  25698880|Blocked Driveway|\n|  25698881|Blocked Driveway|\n|  25698882|Blocked Driveway|\n|  25698885|Blocked Driveway|\n|  25698886|Blocked Driveway|\n|  25699532|Blocked Driveway|\n|  25699531|Blocked Driveway|\n|  25699535|Blocked Driveway|\n+----------+----------------+\nonly showing top 20 rows\n\n+----------+--------------------+\n|Unique Key|      Complaint Type|\n+----------+--------------------+\n|  25698490|    Street Condition|\n|  25698491|    Street Condition|\n|  25698492|    Street Condition|\n|  25698691|Noise - Street/Si...|\n|  25698692|Noise - Street/Si...|\n|  25698693|Noise - Street/Si...|\n|  25698694|Noise - Street/Si...|\n|  25698695|Noise - Street/Si...|\n|  25698696|Noise - Street/Si...|\n|  25698697|Noise - Street/Si...|\n|  25698806|Noise - Street/Si...|\n|  25698807|Noise - Street/Si...|\n|  25698808|Noise - Street/Si...|\n|  25698809|Noise - Street/Si...|\n|  25698811|Noise - Street/Si...|\n|  25698813|Noise - Street/Si...|\n|  25698814|Noise - Street/Si...|\n|  25698815|Noise - Street/Si...|\n|  25698816|Noise - Street/Si...|\n|  25698817|Noise - Street/Si...|\n+----------+--------------------+\nonly showing top 20 rows\n\n+----------+--------------+\n|Unique Key|Complaint Type|\n+----------+--------------+\n+----------+--------------+\n\n+----------+--------------------+\n|Unique Key|      Complaint Type|\n+----------+--------------------+\n|  25698530|General Construct...|\n|  25699059|General Construct...|\n|  25699076|General Construct...|\n|  25699075|General Construct...|\n|  25699077|            Plumbing|\n|  25699138|General Construct...|\n|  25699220|General Construct...|\n|  25699780|General Construct...|\n|  25699782|General Construct...|\n|  25699803|General Construct...|\n|  25699921|General Construct...|\n|  25699922|General Construct...|\n|  25700401|General Construct...|\n|  25700480|General Construct...|\n|  25700530|General Construct...|\n|  25700531|General Construct...|\n|  25700532|General Construct...|\n|  25700533|General Construct...|\n|  25700626|General Construct...|\n|  25701110|General Construct...|\n+----------+--------------------+\nonly showing top 20 rows\n\n+----------+--------------+\n|Unique Key|Complaint Type|\n+----------+--------------+\n+----------+--------------+\n\n+----------+--------------+\n|Unique Key|Complaint Type|\n+----------+--------------+\n+----------+--------------+\n\n+----------+--------------+\n|Unique Key|Complaint Type|\n+----------+--------------+\n+----------+--------------+\n\n+----------+--------------+\n|Unique Key|Complaint Type|\n+----------+--------------+\n+----------+--------------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067800_664185346",
      "id": "paragraph_1639318597608_1098447190",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:561"
    },
    {
      "title": "Generalizing \"complaint type\"",
      "text": "%pyspark\n\ndef complaint_outliers_correction(df):\n    df=df.withColumn(\"Complaint Type\", regexp_replace(col(\"Complaint Type\"),\"Noise.*\",\"Noise Complaint\"))\n    df=df.withColumn(\"Complaint Type\", regexp_replace(col(\"Complaint Type\"),\"Ferry.*\",\"Ferry Complaint\"))\n    df=df.withColumn(\"Complaint Type\", regexp_replace(col(\"Complaint Type\"),\"Highway.*\",\"Highway Complaint\"))\n    df=df.withColumn(\"Complaint Type\", regexp_replace(col(\"Complaint Type\"),\"Taxi.*\",\"Taxi Complaint\"))\n    df=df.withColumn(\"Complaint Type\", regexp_replace(col(\"Complaint Type\"),\"Water.*\",\"Water Complaint\"))\n    df=df.withColumn(\"Complaint Type\", regexp_replace(col(\"Complaint Type\"),\"Parking.*\",\"Parking Complaint\"))\n    df=df.withColumn(\"Complaint Type\", regexp_replace(col(\"Complaint Type\"),\"Blocked Driveway.*\",\"Blocked Driveway Complaint\"))\n    df=df.withColumn(\"Complaint Type\", regexp_replace(col(\"Complaint Type\"),\"Street.*\",\"Street Complaint\"))\n    df=df.withColumn(\"Complaint Type\", regexp_replace(col(\"Complaint Type\"),\"Heating.*\",\"Heating Complaint\"))\n    df=df.withColumn(\"Complaint Type\", regexp_replace(col(\"Complaint Type\"),\"Plumbing.*\",\"Plumbing Complaint\"))\n    df=df.withColumn(\"Complaint Type\", regexp_replace(col(\"Complaint Type\"),\"unsanitary condition.*\",\"Unsanitary condition Complaint\"))\n    df=df.withColumn(\"Complaint Type\", regexp_replace(col(\"Complaint Type\"),\"construction.*\",\"Construction Complaint\"))\n    df=df.withColumn(\"Complaint Type\", regexp_replace(col(\"Complaint Type\"),\"traffic.*\",\"Traffic Complaint\"))\n    df=df.withColumn(\"Complaint Type\", regexp_replace(col(\"Complaint Type\"),\"sewer.*\",\"Sewer Complaint\"))\n    return df",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067800_276313978",
      "id": "paragraph_1639266391259_1717791400",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:562"
    },
    {
      "text": "%pyspark\ndf = complaint_outliers_correction(df)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067800_153088013",
      "id": "paragraph_1639318707416_383742194",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:563"
    },
    {
      "title": "Showing that there are no more Complaint Types that are different from the normalized ones",
      "text": "%pyspark\ncomplaint_outliers_display(df)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "msg": [
          {
            "type": "TEXT",
            "data": ""
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067800_1350515694",
      "id": "paragraph_1639272555951_453456392",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:564"
    },
    {
      "title": "Get the data which only has the correct boroughs",
      "text": "%pyspark\n#this code will help us in eliminating the rows with missing borough/zip code values\n\ndf.createOrReplaceTempView(\"temp\")\ndf =spark.sql(\"SELECT * FROM temp WHERE BOROUGH IN ('QUEENS','BROOKLYN','BRONX','MANHATTAN','STATEN ISLAND')\")",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067800_83320038",
      "id": "paragraph_1639319597865_374750617",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:565"
    },
    {
      "text": "%pyspark\ndf.take(10)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067800_1267047800",
      "id": "paragraph_1639325722608_1131597795",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:566"
    },
    {
      "title": "Dropping columns which have > 70 % of data missing ",
      "text": "%pyspark\n\ndef null_vals(curr_val, null_val):\n\tnull_val.append(data.select([count(when((col(curr_val)==\"NA\")|(col(curr_val)==\"UNKNOWN\") | (col(curr_val)==\"Unspecified\") | (col(curr_val)==\"N/A\") | (col(curr_val)==\"\") | (col(curr_val).isNull()) | (col(curr_val)==\"0 Unspecified\"), curr_val))]).take(1)[0][0])\n\ndef drop_sparse_cols(df):\n    rows = []\n\n    for i in df.columns:\n    \tnullValues(i, rows)\n\n    length = df.count()\n    \n    for i in range(0, len(rows)):\n    \trows[i] = (rows[i] / length) * 100\n\n    headers = df.columns\n    \n    for i in range(0, len(rows)):\n\t    if(rows[i] > 70):\n\t\t    df = df.drop(headers[i])   ",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067800_1424071226",
      "id": "paragraph_1639363862742_368674624",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:567"
    },
    {
      "title": "Downloading the cleaned 3-1-1 Data",
      "text": "%pyspark\ndf.coalesce(1).write.option(\"header\", \"true\").csv(\"cleanData-311.csv\")",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067800_2122993895",
      "id": "paragraph_1639319874286_161774535",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:568"
    },
    {
      "title": " Flu Vaccination Dataset ",
      "text": "%pyspark\ndfCreation(flu_vac_df)\nflu_vac_df.printSchema()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- OBJECTID: string (nullable = true)\n |-- A: string (nullable = true)\n |-- Service Category: string (nullable = true)\n |-- Service Type: string (nullable = true)\n |-- Walk-in: string (nullable = true)\n |-- Insurance: string (nullable = true)\n |-- Children: string (nullable = true)\n |-- Facility Name : string (nullable = true)\n |-- Address: string (nullable = true)\n |-- City: string (nullable = true)\n |-- Borough: string (nullable = true)\n |-- Latitude: string (nullable = true)\n |-- Longitude: string (nullable = true)\n |-- ZIP Code: integer (nullable = true)\n |-- Phone: string (nullable = true)\n |-- Website: string (nullable = true)\n |-- Monday: string (nullable = true)\n |-- Tuesday: string (nullable = true)\n |-- Wednesday: string (nullable = true)\n |-- Thursday: string (nullable = true)\n |-- Friday: string (nullable = true)\n |-- Saturday: string (nullable = true)\n |-- Sunday: string (nullable = true)\n |-- More Information: string (nullable = true)\n |-- DOHMH Website: string (nullable = true)\n |-- Location: string (nullable = true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067800_1581926756",
      "id": "paragraph_1639322441071_1097900692",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:569"
    },
    {
      "title": "Validating Zip Code to Borough mapping",
      "text": "%pyspark\nFLU_ZIP_CODE = \"ZIP Code\"\nFLU_PRIMARY_KEY = \"OBJECTID\"\nFLU_BOROUGH = \"Borough\"\nflu_vac_df = stringtoI(flu_vac_df,FLU_ZIP_CODE)\nflu_vac_df.printSchema()\ninc_zipToB_map(flu_vac_df, FLU_ZIP_CODE, FLU_PRIMARY_KEY, FLU_BOROUGH)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- OBJECTID: string (nullable = true)\n |-- A: string (nullable = true)\n |-- Service Category: string (nullable = true)\n |-- Service Type: string (nullable = true)\n |-- Walk-in: string (nullable = true)\n |-- Insurance: string (nullable = true)\n |-- Children: string (nullable = true)\n |-- Facility Name : string (nullable = true)\n |-- Address: string (nullable = true)\n |-- City: string (nullable = true)\n |-- Borough: string (nullable = true)\n |-- Latitude: string (nullable = true)\n |-- Longitude: string (nullable = true)\n |-- ZIP Code: integer (nullable = true)\n |-- Phone: string (nullable = true)\n |-- Website: string (nullable = true)\n |-- Monday: string (nullable = true)\n |-- Tuesday: string (nullable = true)\n |-- Wednesday: string (nullable = true)\n |-- Thursday: string (nullable = true)\n |-- Friday: string (nullable = true)\n |-- Saturday: string (nullable = true)\n |-- Sunday: string (nullable = true)\n |-- More Information: string (nullable = true)\n |-- DOHMH Website: string (nullable = true)\n |-- Location: string (nullable = true)\n\nIncorrect Data for BRONX:\n\n+--------+--------+-------+\n|OBJECTID|ZIP Code|Borough|\n+--------+--------+-------+\n+--------+--------+-------+\n\nIncorrect Data for BROOKLYN:\n\n+--------+-------+\n|OBJECTID|Borough|\n+--------+-------+\n+--------+-------+\n\nIncorrect Data for MANHATTAN:\n\n+--------+-------+\n|OBJECTID|Borough|\n+--------+-------+\n|     231| Queens|\n+--------+-------+\n\nIncorrect Data for STATEN ISLAND:\n\n+--------+-------+\n|OBJECTID|Borough|\n+--------+-------+\n+--------+-------+\n\nIncorrect Data for QUEENS:\n\n+--------+-------+\n|OBJECTID|Borough|\n+--------+-------+\n+--------+-------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067801_1720239951",
      "id": "paragraph_1639335948843_1806400965",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:570"
    },
    {
      "title": "NYPD Complaint Dataset",
      "text": "%pyspark\n\nNYPD_complaint_df.printSchema()\n\n# Validation !!!!\ndef show_dates_in_the_future(data_frame, date_col_name):\n    data_frame.where((col(date_col_name)>current_date())).select(date_col_name).show()\n    \nshow_dates_in_the_future(NYPD_complaint_df, \"CMPLNT_FR_DT\")\n\nshow_dates_in_the_future(NYPD_complaint_df, \"CMPLNT_TO_DT\")\n\nshow_dates_in_the_future(NYPD_complaint_df, \"RPT_DT\")\n\n",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- CMPLNT_NUM: string (nullable = true)\n |-- CMPLNT_FR_DT: string (nullable = true)\n |-- CMPLNT_FR_TM: string (nullable = true)\n |-- CMPLNT_TO_DT: string (nullable = true)\n |-- CMPLNT_TO_TM: string (nullable = true)\n |-- ADDR_PCT_CD: string (nullable = true)\n |-- RPT_DT: string (nullable = true)\n |-- KY_CD: string (nullable = true)\n |-- OFNS_DESC: string (nullable = true)\n |-- PD_CD: string (nullable = true)\n |-- PD_DESC: string (nullable = true)\n |-- CRM_ATPT_CPTD_CD: string (nullable = true)\n |-- LAW_CAT_CD: string (nullable = true)\n |-- BORO_NM: string (nullable = true)\n |-- LOC_OF_OCCUR_DESC: string (nullable = true)\n |-- PREM_TYP_DESC: string (nullable = true)\n |-- JURIS_DESC: string (nullable = true)\n |-- JURISDICTION_CODE: string (nullable = true)\n |-- PARKS_NM: string (nullable = true)\n |-- HADEVELOPT: string (nullable = true)\n |-- HOUSING_PSA: string (nullable = true)\n |-- X_COORD_CD: string (nullable = true)\n |-- Y_COORD_CD: string (nullable = true)\n |-- SUSP_AGE_GROUP: string (nullable = true)\n |-- SUSP_RACE: string (nullable = true)\n |-- SUSP_SEX: string (nullable = true)\n |-- TRANSIT_DISTRICT: string (nullable = true)\n |-- Latitude: string (nullable = true)\n |-- Longitude: string (nullable = true)\n |-- Lat_Lon: string (nullable = true)\n |-- PATROL_BORO: string (nullable = true)\n |-- STATION_NAME: string (nullable = true)\n |-- VIC_AGE_GROUP: string (nullable = true)\n |-- VIC_RACE: string (nullable = true)\n |-- VIC_SEX: string (nullable = true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067801_1219509443",
      "id": "paragraph_1639351335958_210164973",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:571"
    },
    {
      "title": "Drop x and y coordinates since we already have Lon_Lat",
      "text": "%pyspark\n\nNYPD_complaint_df = NYPD_complaint_df.drop('X_COORD_CD')\nNYPD_complaint_df = NYPD_complaint_df.drop('Y_COORD_CD')",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067801_305539634",
      "id": "paragraph_1639362312356_122898337",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:572"
    },
    {
      "title": "Drop Latitude and Longitude since we already have Lon_Lat",
      "text": "%pyspark\n\nNYPD_complaint_df = NYPD_complaint_df.drop('Latitude')\nNYPD_complaint_df = NYPD_complaint_df.drop('Longitude')",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067801_655218339",
      "id": "paragraph_1639362356455_2082568242",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:573"
    },
    {
      "title": "NYPD Arrests Dataset",
      "text": "%pyspark\n\nNYPD_arrests_df.printSchema()\n\nshow_dates_in_the_future(NYPD_arrests_df, \"ARREST_DATE\")\n",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- ARREST_KEY: string (nullable = true)\n |-- ARREST_DATE: string (nullable = true)\n |-- PD_CD: string (nullable = true)\n |-- PD_DESC: string (nullable = true)\n |-- KY_CD: string (nullable = true)\n |-- OFNS_DESC: string (nullable = true)\n |-- LAW_CODE: string (nullable = true)\n |-- LAW_CAT_CD: string (nullable = true)\n |-- ARREST_BORO: string (nullable = true)\n |-- ARREST_PRECINCT: string (nullable = true)\n |-- JURISDICTION_CODE: string (nullable = true)\n |-- AGE_GROUP: string (nullable = true)\n |-- PERP_SEX: string (nullable = true)\n |-- PERP_RACE: string (nullable = true)\n |-- X_COORD_CD: string (nullable = true)\n |-- Y_COORD_CD: string (nullable = true)\n |-- Latitude: string (nullable = true)\n |-- Longitude: string (nullable = true)\n |-- New Georeferenced Column: string (nullable = true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067801_843883491",
      "id": "paragraph_1639351815408_853755950",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:574"
    },
    {
      "title": "Drop x and y coordinates since we already have Lon_Lat",
      "text": "%pyspark\n\nNYPD_arrests_df = NYPD_arrests_df.drop('X_COORD_CD')\nNYPD_arrests_df = NYPD_arrests_df.drop('Y_COORD_CD')",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067801_1183027035",
      "id": "paragraph_1639362496553_1699062275",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:575"
    },
    {
      "title": "Drop Latitude and Longitude since we already have Lon_Lat",
      "text": "%pyspark\n\nNYPD_arrests_df = NYPD_arrests_df.drop('Latitude')\nNYPD_arrests_df = NYPD_arrests_df.drop('Longitude')",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067801_1722781942",
      "id": "paragraph_1639362542407_364347754",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:576"
    },
    {
      "title": "Shootings Dataset ",
      "text": "%pyspark\n\nshooting_dataset_df.printSchema()\n\nshow_dates_in_the_future(NYPD_arrests_df, \"OCCUR_DATE\")",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- INCIDENT_KEY: string (nullable = true)\n |-- OCCUR_DATE: string (nullable = true)\n |-- OCCUR_TIME: string (nullable = true)\n |-- BORO: string (nullable = true)\n |-- PRECINCT: string (nullable = true)\n |-- JURISDICTION_CODE: string (nullable = true)\n |-- LOCATION_DESC: string (nullable = true)\n |-- STATISTICAL_MURDER_FLAG: string (nullable = true)\n |-- PERP_AGE_GROUP: string (nullable = true)\n |-- PERP_SEX: string (nullable = true)\n |-- PERP_RACE: string (nullable = true)\n |-- VIC_AGE_GROUP: string (nullable = true)\n |-- VIC_SEX: string (nullable = true)\n |-- VIC_RACE: string (nullable = true)\n |-- X_COORD_CD: string (nullable = true)\n |-- Y_COORD_CD: string (nullable = true)\n |-- Latitude: string (nullable = true)\n |-- Longitude: string (nullable = true)\n |-- Lon_Lat: string (nullable = true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067801_879154803",
      "id": "paragraph_1639351887451_1614906404",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:577"
    },
    {
      "title": "Drop x and y coordinates since we already have Lon_Lat",
      "text": "%pyspark\n\n\nshooting_dataset_df = shooting_dataset_df.drop('X_COORD_CD')\nshooting_dataset_df = shooting_dataset_df.drop('Y_COORD_CD')",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067801_1800409949",
      "id": "paragraph_1639362629356_1887248223",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:578"
    },
    {
      "title": "Drop Latitude and Longitude since we already have Lon_Lat",
      "text": "%pyspark\n\nshooting_dataset_df = shooting_dataset_df.drop('Latitude')\nshooting_dataset_df = shooting_dataset_df.drop('Longitude')\n",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067801_265733840",
      "id": "paragraph_1639362618340_298633925",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:579"
    },
    {
      "title": "Bikes - Buildings Dataset",
      "text": "%pyspark\n\nbikes_building_df.printSchema()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- RequestID: string (nullable = true)\n |-- IndexNumber: string (nullable = true)\n |-- TenantName: string (nullable = true)\n |-- TenantFloor: string (nullable = true)\n |-- TenantBuildingNumber: string (nullable = true)\n |-- TenantStreetName: string (nullable = true)\n |-- TenantCity: string (nullable = true)\n |-- TenantStateCode: string (nullable = true)\n |-- TenantPostcode: string (nullable = true)\n |-- TenantBorough: string (nullable = true)\n |-- OwnerName: string (nullable = true)\n |-- OwnerFloor: string (nullable = true)\n |-- OwnerStreetAddress: string (nullable = true)\n |-- OwnerCity: string (nullable = true)\n |-- OwnerStateCode: string (nullable = true)\n |-- OwnerZipCode: string (nullable = true)\n |-- FloorSuiteRequested: string (nullable = true)\n |-- NoOfBicycleRequested: string (nullable = true)\n |-- BBL: string (nullable = true)\n |-- BIN: string (nullable = true)\n |-- DateofRequest: string (nullable = true)\n |-- RequestDateofEntry: string (nullable = true)\n |-- ImplementDate: string (nullable = true)\n |-- PlanPostDate: string (nullable = true)\n |-- PlanSubmitDate: string (nullable = true)\n |-- ExceptionRequestDueDate: string (nullable = true)\n |-- TenantNotificationExceptionDate: string (nullable = true)\n |-- LocationOfEntrances: string (nullable = true)\n |-- RouteToElevators: string (nullable = true)\n |-- RegularHoursOfOperation: string (nullable = true)\n |-- PlandDateReceived: string (nullable = true)\n |-- AlternateParkingLocation: string (nullable = true)\n |-- AlternateParkingDescription: string (nullable = true)\n |-- NoOfBicycleAccomodate: string (nullable = true)\n |-- RouteToAlternateParking: string (nullable = true)\n |-- ParkingExceptionDateReceived: string (nullable = true)\n |-- ParkingExceptionDateofEntry: string (nullable = true)\n |-- DOBDeviceNumber: string (nullable = true)\n |-- DateOfBuilding: string (nullable = true)\n |-- DateOfElevator: string (nullable = true)\n |-- MethodOfElevator: string (nullable = true)\n |-- SelfServiceOrOperator: string (nullable = true)\n |-- IsCarTop: string (nullable = true)\n |-- IsCarDoor: string (nullable = true)\n |-- ElevatorExceptionDateReceived: string (nullable = true)\n |-- ElevatorExceptionHardCopyReceived: string (nullable = true)\n |-- ElevatorExceptionDateofEntry: string (nullable = true)\n |-- RequestStatus: string (nullable = true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067802_493546787",
      "id": "paragraph_1639351931836_532464817",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:580"
    },
    {
      "title": "Casting the datatype of ZipCode from String to Integer",
      "text": "%pyspark\n\nbikes_building_df = bikes_building_df.withColumn(\"TenantPostcode\", bikes_building_df[\"TenantPostcode\"].cast(IntegerType(\nbikes_building_df = bikes_building_df.withColumn(\"OwnerZipCode\", bikes_building_df[\"OwnerZipCode\"].cast(IntegerType())) ",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067802_396491104",
      "id": "paragraph_1639362823881_1833583744",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:581"
    },
    {
      "title": "Creating RDD Dataframe for complete dataset",
      "text": "%pyspark\n\nrdd = bikes_building_df.rdd                               \ndf = spark.createDataFrame(rdd, bikes_building_df.schema) ",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067802_807346046",
      "id": "paragraph_1639362845419_260133618",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:582"
    },
    {
      "title": "Finding incorrect mappings of ZipCode to Boroughs",
      "text": "%pyspark\n\nprint(\"Incorrect Data for BRONX:\\n\")                                                                                                            \ndf.where((col(\"TenantPostcode\") > 10450) & (col(\"TenantPostcode\") < 10475) & (col(\"TenantBorough\") != \"BRONX\")).select(\"TenantBorough\").show()  \nprint(\"Incorrect Data for BROOKLYN:\\n\")                                                                                                         \ndf.where((col(\"TenantPostcode\") > 11200) & (col(\"TenantPostcode\") < 11240) & (col(\"TenantBorough\") != \"BROOKLYN\")).select(\"TenantBorough\").show(\nprint(\"Incorrect Data for MANHATTAN:\\n\")                                                                                                        \ndf.where((col(\"TenantPostcode\") > 10000) & (col(\"TenantPostcode\") < 10280) & (col(\"TenantBorough\") != \"MANHATTAN\")).select(\"TenantBorough\").show\nprint(\"Incorrect Data for STATEN ISLAND:\\n\")                                                                                                    \ndf.where((col(\"TenantPostcode\") > 10300) & (col(\"TenantPostcode\") < 10315) & (col(\"TenantBorough\") != \"STATEN ISLAND\")).select(\"TenantBorough\").\nprint(\"Incorrect Data for QUEENS:\\n\")                                                                                                           \ndf.where((col(\"TenantPostcode\") > 11350) & (col(\"TenantPostcode\") < 11700) & (col(\"TenantBorough\") != \"QUEENS\")).select(\"TenantBorough\").show() ",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067802_669199432",
      "id": "paragraph_1639362868643_1927357882",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:583"
    },
    {
      "title": "Validating the boroughs based on ZipCodes",
      "text": "%pyspark\n\ndf = df.withColumn(\"TenantBorough\", when((col(\n            .when((col(\"TenantPostcode\") > 112\n            .when((col(\"TenantPostcode\")>10450\n            .when((col(\"TenantPostcode\")>10000\n            .when((col(\"TenantPostcode\")>10300\n            .otherwise(col(\"TenantBorough\"))) ",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067802_574975855",
      "id": "paragraph_1639362918098_1368724172",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:584"
    },
    {
      "title": "Shows that all incorrect Zipcode to borough mappings are now corrected on the 100k records",
      "text": "%pyspark\n\nprint(\"Incorrect Data for BRONX:\\n\")                                                                                                           \ndf.where((col(\"TenantPostcode\") > 10450) & (col(\"TenantPostcode\") < 10475) & (col(\"TenantBorough\") != \"BRONX\")).select(\"TenantBorough\").show() \nprint(\"Incorrect Data for BROOKLYN:\\n\")                                                                                                        \ndf.where((col(\"TenantPostcode\") > 11200) & (col(\"TenantPostcode\") < 11240) & (col(\"TenantBorough\") != \"BROOKLYN\")).select(\"TenantBorough\").show\nprint(\"Incorrect Data for MANHATTAN:\\n\")                                                                                                       \ndf.where((col(\"TenantPostcode\") > 10000) & (col(\"TenantPostcode\") < 10280) & (col(\"TenantBorough\") != \"MANHATTAN\")).select(\"TenantBorough\").sho\nprint(\"Incorrect Data for STATEN ISLAND:\\n\")                                                                                                   \ndf.where((col(\"TenantPostcode\") > 10300) & (col(\"TenantPostcode\") < 10315) & (col(\"TenantBorough\") != \"STATEN ISLAND\")).select(\"TenantBorough\")\nprint(\"Incorrect Data for QUEENS:\\n\")                                                                                                          \ndf.where((col(\"TenantPostcode\") > 11350) & (col(\"TenantPostcode\") < 11700) & (col(\"TenantBorough\") != \"QUEENS\")).select(\"TenantBorough\").show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067802_1971193117",
      "id": "paragraph_1639362944287_1901309771",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:585"
    },
    {
      "title": "Finding missing data in City column",
      "text": "%pyspark\n\nprint(\"Missing city data:\\n\")                                                                                                                \ndf.where((col(\"TenantCity\") ==\"N/A\") | (col(\"TenantCity\")==\"NA\") | (col(\"TenantCity\").isNull())).select(\"TenantBorough\", \"TenantCity\").show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067802_32676716",
      "id": "paragraph_1639362979729_1050671912",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:586"
    },
    {
      "title": "Standardization of City column",
      "text": "%pyspark\n\ndf = df.withColumn(\"TenantCity\", when((col(\"T\n            .otherwise(col(\"TenantBorough\")))",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067802_1436302734",
      "id": "paragraph_1639363005504_1890311106",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:587"
    },
    {
      "title": "Shows that Generalization was applied for Missing City to New York",
      "text": "%pyspark\n\nprint(\"Missing city data:\\n\")                                                                                                                 \ndf.where((col(\"TenantCity\") ==\"N/A\") | (col(\"TenantCity\")==\"NA\") | (col(\"TenantCity\").isNull())).select(\"TenantBorough\", \"TenantCity\").show() ",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067802_1279857692",
      "id": "paragraph_1639363028580_20325839",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:588"
    },
    {
      "title": "Checking if DateofRequest,  DateOfBuilding and  DateOfElevator has any future date",
      "text": "%pyspark\n\nprint(\"For DateofRequest :\")                                                    \ndf.where((col(\"DateofRequest\")>current_date())).select(\"DateofRequest\").show()  \nprint(\"For DateOfBuilding :\")                                                   \ndf.where((col(\"DateOfBuilding\")>current_date())).select(\"DateOfBuilding\").show()\nprint(\"For DateOfElevator :\")                                                   \ndf.where((col(\"DateOfElevator\")>current_date())).select(\"DateOfElevator\").show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067802_1647931390",
      "id": "paragraph_1639363054560_2105410586",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:589"
    },
    {
      "title": "Filtering out the future dates ",
      "text": "%pyspark\n\ndf = df.filter(df[\"DateofRequest\"] <= current_date())  \ndf = df.filter(df[\"DateOfBuilding\"] <= current_date()) \ndf = df.filter(df[\"DateOfElevator\"] <= current_date()) ",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067802_320565042",
      "id": "paragraph_1639363076850_1032740673",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:590"
    },
    {
      "title": "NYPD-B-Summons Dataset ",
      "text": "%pyspark\n\nNYPD_B_summons_df.printSchema()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- EVNT_KEY: string (nullable = true)\n |-- VIOLATION_DATE: string (nullable = true)\n |-- VIOLATION_TIME: string (nullable = true)\n |-- CHG_LAW_CD: string (nullable = true)\n |-- VIOLATION_CODE: string (nullable = true)\n |-- VEH_CATEGORY: string (nullable = true)\n |-- CITY_NM: string (nullable = true)\n |-- RPT_OWNING_CMD: string (nullable = true)\n |-- X_COORD_CD: string (nullable = true)\n |-- Y_COORD_CD: string (nullable = true)\n |-- Latitude: string (nullable = true)\n |-- Longitude: string (nullable = true)\n |-- Location Point: string (nullable = true)\n |-- JURIS_CD: string (nullable = true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067802_1687373665",
      "id": "paragraph_1639351961652_2011704823",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:591"
    },
    {
      "title": "Creating RDD Dataframe for complete dataset",
      "text": "%pyspark\n\nrdd = NYPD_B_summons_df.rdd\ndf = spark.createDataFrame(rdd, NYPD_B_summons_df.schema)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_441844768",
      "id": "paragraph_1639363242205_699829683",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:592"
    },
    {
      "title": "Finding missing data in City column",
      "text": "%pyspark\n\nprint(\"Missing city data:\\n\")\ndf.where((col(\"CITY_NM\") ==\"N/A\") | (col(\"CITY_NM\")==\"NA\") | (col(\"CITY_NM\").isNull())).select(\"CITY_NM\").show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_1600258945",
      "id": "paragraph_1639363256722_1305206959",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:593"
    },
    {
      "title": "Standardization of City column",
      "text": "%pyspark\n\ndf = df.withColumn(\"CITY_NM\", when((col(\"CITY_NM\").isNull()) | (col(\"CITY_NM\")==\"N/A\") | (col(\"CITY_NM\")==\"NA\"),\"New York\")\n            .otherwise(col(\"CITY_NM\")))",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_486345538",
      "id": "paragraph_1639363279935_1859249612",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:594"
    },
    {
      "title": "Shows that Generalization was applied for Missing City to New York",
      "text": "%pyspark\n\nprint(\"Missing city data:\\n\")\ndf.where((col(\"CITY_NM\") ==\"N/A\") | (col(\"CITY_NM\")==\"NA\") | (col(\"CITY_NM\").isNull())).select(\"CITY_NM\").show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_1594432201",
      "id": "paragraph_1639363298628_1866544408",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:595"
    },
    {
      "title": "Checking if Created Date has any future date",
      "text": "%pyspark\n\ndf.where((col(\"VIOLATION_DATE\")>current_date())).select(\"VIOLATION_DATE\").show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_2005152028",
      "id": "paragraph_1639363329368_357471569",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:596"
    },
    {
      "title": "Filtering all rows where Created Date is a future date",
      "text": "%pyspark\n\ndf = df.filter(df[\"VIOLATION_DATE\"] <= current_date())",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_1548658617",
      "id": "paragraph_1639363341859_21993482",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:597"
    },
    {
      "title": "Drop x and y coordinates since we already have location",
      "text": "%pyspark\n\ndf = df.drop('X_COORD_CD')\ndf = df.drop('Y_COORD_CD')",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_980742467",
      "id": "paragraph_1639363367768_1232990568",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:598"
    },
    {
      "title": "Drop Latitude and Longitude since we already have location",
      "text": "%pyspark\n\ndf = df.drop('Latitude')\ndf = df.drop('Longitude')",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_1818594258",
      "id": "paragraph_1639363388450_1658935523",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:599"
    },
    {
      "title": "Wi-Fi Dataset",
      "text": "%pyspark\n\nwifi_df.printSchema()\n",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- OBJECTID: string (nullable = true)\n |-- Borough: string (nullable = true)\n |-- Type: string (nullable = true)\n |-- Provider: string (nullable = true)\n |-- Name: string (nullable = true)\n |-- Location: string (nullable = true)\n |-- Latitude: string (nullable = true)\n |-- Longitude: string (nullable = true)\n |-- X: string (nullable = true)\n |-- Y: string (nullable = true)\n |-- Location_T: string (nullable = true)\n |-- Remarks: string (nullable = true)\n |-- City: string (nullable = true)\n |-- SSID: string (nullable = true)\n |-- SourceID: string (nullable = true)\n |-- Activated: string (nullable = true)\n |-- BoroCode: string (nullable = true)\n |-- Borough Name: string (nullable = true)\n |-- Neighborhood Tabulation Area Code (NTACODE): string (nullable = true)\n |-- Neighborhood Tabulation Area (NTA): string (nullable = true)\n |-- Council Distrcit: string (nullable = true)\n |-- Postcode: string (nullable = true)\n |-- BoroCD: string (nullable = true)\n |-- Census Tract: string (nullable = true)\n |-- BCTCB2010: string (nullable = true)\n |-- BIN: string (nullable = true)\n |-- BBL: string (nullable = true)\n |-- DOITT_ID: string (nullable = true)\n |-- Location (Lat, Long): string (nullable = true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_1206938968",
      "id": "paragraph_1639352099756_407863730",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:600"
    },
    {
      "title": "Casting the datatype of ZipCode from String to Integer",
      "text": "%pyspark\n\nwifi_df = wifi_df.withColumn(\"Postcode\", wifi_df[\"Postcode\"].cast(IntegerType()))",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_1487055576",
      "id": "paragraph_1639363480847_1099130059",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:601"
    },
    {
      "title": "Creating RDD Dataframe for complete dataset",
      "text": "%pyspark\n\nrdd = wifi_df.rdd\ndf = spark.createDataFrame(rdd, wifi_df.schema)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_153230064",
      "id": "paragraph_1639363508255_1950558754",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:602"
    },
    {
      "title": "Finding incorrect mappings of ZipCode to Boroughs",
      "text": "%pyspark\n\nprint(\"Incorrect Data for BRONX:\\n\")\ndf.where((col(\"Postcode\") > 10450) & (col(\"Postcode\") < 10475) & (col(\"Borough Name\") != \"Bronx\")).select(\"Borough Name\").show()\nprint(\"Incorrect Data for BROOKLYN:\\n\")\ndf.where((col(\"Postcode\") > 11200) & (col(\"Postcode\") < 11240) & (col(\"Borough Name\") != \"Brooklyn\")).select(\"Borough Name\").show()\nprint(\"Incorrect Data for MANHATTAN:\\n\")\ndf.where((col(\"Postcode\") > 10000) & (col(\"Postcode\") < 10280) & (col(\"Borough Name\") != \"Manhattan\")).select(\"Borough Name\").show()\nprint(\"Incorrect Data for STATEN ISLAND:\\n\")\ndf.where((col(\"Postcode\") > 10300) & (col(\"Postcode\") < 10315) & (col(\"Borough Name\") != \"Staten Island\")).select(\"Borough Name\").show()\nprint(\"Incorrect Data for QUEENS:\\n\")\ndf.where((col(\"Postcode\") > 11350) & (col(\"Postcode\") < 11700) & (col(\"Borough Name\") != \"Queens\")).select(\"Borough Name\").show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_304051982",
      "id": "paragraph_1639363525023_2072127404",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:603"
    },
    {
      "title": "Validating the boroughs based on ZipCodes",
      "text": "%pyspark\n\ndf = df.withColumn(\"Borough\", when((col(\"Postcode\") > 11350) & (col(\"Postcode\")<11700),\"Queens\")\n            .when((col(\"Postcode\") > 11200) & (col(\"Postcode\")<11240),\"Brooklyn\")\n            .when((col(\"Postcode\")>10450) & (col(\"Postcode\")<10475),\"Bronx\")\n            .when((col(\"Postcode\")>10000) & (col(\"Postcode\")<10280),\"Manhattan\")\n            .when((col(\"Postcode\")>10300) & (col(\"Postcode\")<10315),\"Staten Island\")\n            .otherwise(col(\"Borough\")))",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_1195466187",
      "id": "paragraph_1639363542538_1453066445",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:604"
    },
    {
      "title": "Shows that all incorrect Zipcode to borough mappings are now corrected on the 100k records",
      "text": "%pyspark\n\nprint(\"Incorrect Data for BRONX:\\n\")\ndf.where((col(\"Postcode\") > 10450) & (col(\"Postcode\") < 10475) & (col(\"Borough Name\") != \"Bronx\")).select(\"Borough Name\").show()\nprint(\"Incorrect Data for BROOKLYN:\\n\")\ndf.where((col(\"Postcode\") > 11200) & (col(\"Postcode\") < 11240) & (col(\"Borough Name\") != \"Brooklyn\")).select(\"Borough Name\").show()\nprint(\"Incorrect Data for MANHATTAN:\\n\")\ndf.where((col(\"Postcode\") > 10000) & (col(\"Postcode\") < 10280) & (col(\"Borough Name\") != \"Manhattan\")).select(\"Borough Name\").show()\nprint(\"Incorrect Data for STATEN ISLAND:\\n\")\ndf.where((col(\"Postcode\") > 10300) & (col(\"Postcode\") < 10315) & (col(\"Borough Name\") != \"Staten Island\")).select(\"Borough Name\").show()\nprint(\"Incorrect Data for QUEENS:\\n\")\ndf.where((col(\"Postcode\") > 11350) & (col(\"Postcode\") < 11700) & (col(\"Borough Name\") != \"Queens\")).select(\"Borough Name\").show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_696381969",
      "id": "paragraph_1639363560470_346338747",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:605"
    },
    {
      "title": "Finding missing data in City column",
      "text": "%pyspark\n\nprint(\"Missing city data:\\n\")\ndf.where((col(\"City\") ==\"N/A\") | (col(\"City\")==\"NA\") | (col(\"City\").isNull())).select(\"City\").show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_1149814908",
      "id": "paragraph_1639363580100_996956078",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:606"
    },
    {
      "title": "Standardization of City column",
      "text": "%pyspark\n\ndf = df.withColumn(\"City\", when((col(\"City\").isNull()) | (col(\"City\")==\"N/A\") | (col(\"City\")==\"NA\"),\"New York\")\n            .otherwise(col(\"City\")))",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_585672281",
      "id": "paragraph_1639363596704_1805200259",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:607"
    },
    {
      "title": "Shows that Generalization was applied for Missing City to New York",
      "text": "%pyspark\n\nprint(\"Missing city data:\\n\")\ndf.where((col(\"City\") ==\"N/A\") | (col(\"City\")==\"NA\") | (col(\"City\").isNull())).select(\"City\").show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_697880507",
      "id": "paragraph_1639363616353_1550024516",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:608"
    },
    {
      "title": "Checking if Created Date has any future date",
      "text": "%pyspark\n\ndf.where((col(\"Created Date\") > current_date())).select(\"Created Date\").show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_1238721386",
      "id": "paragraph_1639363637940_1780916424",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:609"
    },
    {
      "title": "Drop x and y coordinates since we already have Latitude and Longitude",
      "text": "%pyspark\n\ndf = df.drop('X')\ndf = df.drop('Y')",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_1154048428",
      "id": "paragraph_1639363670742_366932220",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:610"
    },
    {
      "title": "Housing Buildings Dataset",
      "text": "%pyspark\n\nhousing_buildings_df.printSchema()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- Project ID: string (nullable = true)\n |-- Project Name: string (nullable = true)\n |-- Project Start Date: string (nullable = true)\n |-- Project Completion Date: string (nullable = true)\n |-- Building ID: string (nullable = true)\n |-- Number: string (nullable = true)\n |-- Street: string (nullable = true)\n |-- Borough: string (nullable = true)\n |-- Postcode: string (nullable = true)\n |-- BBL: string (nullable = true)\n |-- BIN: string (nullable = true)\n |-- Community Board: string (nullable = true)\n |-- Council District: string (nullable = true)\n |-- Census Tract: string (nullable = true)\n |-- NTA - Neighborhood Tabulation Area: string (nullable = true)\n |-- Latitude: string (nullable = true)\n |-- Longitude: string (nullable = true)\n |-- Latitude (Internal): string (nullable = true)\n |-- Longitude (Internal): string (nullable = true)\n |-- Building Completion Date: string (nullable = true)\n |-- Reporting Construction Type: string (nullable = true)\n |-- Extended Affordability Only: string (nullable = true)\n |-- Prevailing Wage Status: string (nullable = true)\n |-- Extremely Low Income Units: string (nullable = true)\n |-- Very Low Income Units: string (nullable = true)\n |-- Low Income Units: string (nullable = true)\n |-- Moderate Income Units: string (nullable = true)\n |-- Middle Income Units: string (nullable = true)\n |-- Other Income Units: string (nullable = true)\n |-- Studio Units: string (nullable = true)\n |-- 1-BR Units: string (nullable = true)\n |-- 2-BR Units: string (nullable = true)\n |-- 3-BR Units: string (nullable = true)\n |-- 4-BR Units: string (nullable = true)\n |-- 5-BR Units: string (nullable = true)\n |-- 6-BR+ Units: string (nullable = true)\n |-- Unknown-BR Units: string (nullable = true)\n |-- Counted Rental Units: string (nullable = true)\n |-- Counted Homeownership Units: string (nullable = true)\n |-- All Counted Units: string (nullable = true)\n |-- Total Units: string (nullable = true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_1324314972",
      "id": "paragraph_1639352161914_335098303",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:611"
    },
    {
      "title": "Casting the datatype of ZipCode from String to Integer",
      "text": "%pyspark\n\nhousing_buildings_df = housing_buildings_df.withColumn(\"Postcode\", housing_buildings_df[\"Postcode\"].cast(IntegerType()))",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_2052124802",
      "id": "paragraph_1639365246730_1196985569",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:612"
    },
    {
      "title": "Creating RDD Dataframe for complete dataset",
      "text": "%pyspark\n\nrdd = housing_buildings_df.rdd\ndf = spark.createDataFrame(rdd, housing_buildings_df.schema)",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_1787034121",
      "id": "paragraph_1639365401271_705318309",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:613"
    },
    {
      "title": "Finding incorrect mappings of ZipCode to Boroughs",
      "text": "%pyspark\n\nprint(\"Incorrect Data for BRONX:\\n\")\ndf.where((col(\"Postcode\") > 10450) & (col(\"Postcode\") < 10475) & (col(\"Borough\") != \"Bronx\")).select(\"Borough\").show()\nprint(\"Incorrect Data for BROOKLYN:\\n\")\ndf.where((col(\"Postcode\") > 11200) & (col(\"Postcode\") < 11240) & (col(\"Borough\") != \"Brooklyn\")).select(\"Borough\").show()\nprint(\"Incorrect Data for MANHATTAN:\\n\")\ndf.where((col(\"Postcode\") > 10000) & (col(\"Postcode\") < 10280) & (col(\"Borough\") != \"Manhattan\")).select(\"Borough\").show()\nprint(\"Incorrect Data for STATEN ISLAND:\\n\")\ndf.where((col(\"Postcode\") > 10300) & (col(\"Postcode\") < 10315) & (col(\"Borough\") != \"Staten Island\")).select(\"Borough\").show()\nprint(\"Incorrect Data for QUEENS:\\n\")\ndf.where((col(\"Postcode\") > 11350) & (col(\"Postcode\") < 11700) & (col(\"Borough\") != \"Queens\")).select(\"Borough\").show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_1560780750",
      "id": "paragraph_1639365420745_1519666450",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:614"
    },
    {
      "title": "Validating the boroughs based on ZipCodes",
      "text": "%pyspark\n\ndf = df.withColumn(\"Borough\", when((col(\"Postcode\") > 11350) & (col(\"Postcode\")<11700),\"Queens\")\n            .when((col(\"Postcode\") > 11200) & (col(\"Postcode\")<11240),\"Brooklyn\")\n            .when((col(\"Postcode\")>10450) & (col(\"Postcode\")<10475),\"Bronx\")\n            .when((col(\"Postcode\")>10000) & (col(\"Postcode\")<10280),\"Manhattan\")\n            .when((col(\"Postcode\")>10300) & (col(\"Postcode\")<10315),\"Staten Island\")\n            .otherwise(col(\"Borough\")))",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_1257960730",
      "id": "paragraph_1639365437734_1318068507",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:615"
    },
    {
      "title": "Shows that all incorrect Zipcode to borough mappings are now corrected on the 100k records",
      "text": "%pyspark\n\nprint(\"Incorrect Data for BRONX:\\n\")\ndf.where((col(\"Postcode\") > 10450) & (col(\"Postcode\") < 10475) & (col(\"Borough\") != \"Bronx\")).select(\"Borough\").show()\nprint(\"Incorrect Data for BROOKLYN:\\n\")\ndf.where((col(\"Postcode\") > 11200) & (col(\"Postcode\") < 11240) & (col(\"Borough\") != \"Brooklyn\")).select(\"Borough\").show()\nprint(\"Incorrect Data for MANHATTAN:\\n\")\ndf.where((col(\"Postcode\") > 10000) & (col(\"Postcode\") < 10280) & (col(\"Borough\") != \"Manhattan\")).select(\"Borough\").show()\nprint(\"Incorrect Data for STATEN ISLAND:\\n\")\ndf.where((col(\"Postcode\") > 10300) & (col(\"Postcode\") < 10315) & (col(\"Borough\") != \"Staten Island\")).select(\"Borough\").show()\nprint(\"Incorrect Data for QUEENS:\\n\")\ndf.where((col(\"Postcode\") > 11350) & (col(\"Postcode\") < 11700) & (col(\"Borough\") != \"Queens\")).select(\"Borough\").show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_1481490600",
      "id": "paragraph_1639365455154_1292914481",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:616"
    },
    {
      "title": "Checking if Created Date has any future date",
      "text": "%pyspark\n\ndf.where((col(\"Project Start Date\")>current_date())).select(\"Project Start Date\").show()",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_889372971",
      "id": "paragraph_1639365472863_1080255001",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:617"
    },
    {
      "title": "Filtering all rows where Created Date is a future date",
      "text": "%pyspark\n\ndf = df.filter(df[\"Project Start Date\"] <= current_date())\n",
      "user": "nbuser",
      "dateUpdated": "2021-12-12T23:17:47-0500",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1639369067803_601046848",
      "id": "paragraph_1639365493998_1271153486",
      "dateCreated": "2021-12-12T23:17:47-0500",
      "status": "READY",
      "$$hashKey": "object:618"
    }
  ],
  "name": "Final",
  "id": "2GPGXB3TN",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/Final"
}